---
layout: post
status: publish
published: true
title: Qt来了！
author: mp77
author_login: admin
author_email: 8621316@qq.com
wordpress_id: 260
wordpress_url: http://www.hanyi.name/blog/?p=260
date: 2010-10-30 02:40:54.000000000 +08:00
categories:
- Qt
tags: []
comments: []
---
 我们将把Qt(官方发音/kjuːt/，也有读作(/ˈkjuːti/)应用程序框架编程作为一个新的技术类固定专题。Qt是易于学习的，但却很难精通，大概主要是因为她把标准C++作为宿主语言的原因，不过这也恰恰成就了Qt不可阻挡的发展势头。

 <strong>历史</strong>

 1991年，挪威人Haavard Nord和Eirik Chambe-Eng设想开发一个跨平台的应用程序框架，从而方便程序员开发出能够同时运行在不同平台环境下的应用程序。仅三年时间梦想即成为现实，两人合作成立了Quasar Technologies公司专注于跨平台应用程序框架开发，这家公司也就是后来的Trolltech奇趣科技的前身。而对于Trolltech，除了旗下Qt框架和一整套嵌入式Linux开发平台Qtopia之外，著名的Linux桌面环境KDE就是基于Qt开发的。

 2008年6月，芬兰手机厂商Nokia收购了Trolltech，其主要目的是将Qt框架技术与自身Symbian平台紧密整合。目前基于Qt的Nokia Qt SDK也已于早前正式发布。

 如果说在移动平台领域S60似乎是岌岌可危的话，Qt未受丝毫影响，如AutoDesk计算机辅助设计系列软件、Google Earth、Adobe Photoshop Album甚至欧洲航天局、Skype等都使用了基于Qt的应用程序框架。

 <strong>设立专题的原因</strong>

 我们通常采用windows 7和microsoft visual studio 2010 ult作为主要开发环境，同时采用opensuse或其它Linux发行版作为测试环境，时间充足的话，也可能会尝试基于Nokia Qt SDK的移动设备软件开发。实际上，Qt大有作为的还是Linux及其嵌入式领域，而我们还是主要关注有关基于Qt的win32桌面软件，但并不表示我们将其视作MFC等类似这些经典框架的替代品，实际上通过早期了解后，我们发现Qt有她所擅长且表现出色的领域，但也并非全能。

 <strong>开发平台的选择</strong>

 上文指出我们将主要关注Qt在Windows系列平台上的表现，那么采用Microsoft主打的最新IDE及其编译程序是有必要的。至于一些其它方法，例如构建MinGW编译环境，就显得过于简略而给人一种直奔结果的感觉。当然我们可以将MinGW设置为Qt creator这种跨平台IDE的主编译环境，甚至可以在Qt creator中设置MSVC为主编译环境。类似这种组合可能比VS+Qt这种“重量级”组合轻巧的多，对开发过程而言也注定方便的多。然而我们还是建议选择自己喜爱的环境来工作，这不仅仅能保证基本的编码效率，更重要的是能保持一个良好的心情来面对复杂问题求解。
