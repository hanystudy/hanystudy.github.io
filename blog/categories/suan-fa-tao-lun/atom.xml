<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 算法讨论 | Wing of Dream 梦境之翼]]></title>
  <link href="http://www.hanyi.name/blog/categories/suan-fa-tao-lun/atom.xml" rel="self"/>
  <link href="http://www.hanyi.name/"/>
  <updated>2015-08-21T10:12:12+08:00</updated>
  <id>http://www.hanyi.name/</id>
  <author>
    <name><![CDATA[Han Yi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[可爱的TSP]]></title>
    <link href="http://www.hanyi.name/blog/2011/04/09/tsp/"/>
    <updated>2011-04-09T15:21:00+08:00</updated>
    <id>http://www.hanyi.name/blog/2011/04/09/tsp</id>
    <content type="html"><![CDATA[<p> 有意思的是，我接触到的第一个算法问题就是TSP（旅行商问题），自此以后我开始热衷于计算机科学，遗憾的是至今也未有什么收获。但是很显然，TSP及其衍生问题始终是横亘面前的一座高峰，对每一个人—包括所有计算机科学家，都是那么的不可逾越。也许真要等超越阿兰图灵的大师出现—我等凡人恐怕是看不到这一天了。</p>

<p> 不过这里仍要说明的是，我们学习和体会TSP，并不是为了吃饱撑的自虐，也非为了搬弄别人整出的玩意来给自己凑文章。TSP的解法之多令人惊讶，各种方法—即使是一名高中生和一位大学教授所掌握的，在TSP面前似乎都一律平等。但它为我们巩固和发掘基本算法提供了确切的衡量准则，我想这才应该是凡人研究TSP的真正目的。</p>

<p> TSP问题最初的形式来源于爱尔兰数学家W. R. Hamilton发明的智力迷绳游戏，即在一张无向图中找到一条Hamilton回路。也就是从无向图中任意起点处找到一条路径，该路径唯一地穿过图中的每个顶点，最终回到起点。通常Hamilton回路也被称为Hamilton圈。经过若干年演进，普林斯顿大学的Hassler Whitney首次将该系列问题命名为Travelling Salesman Problem，即TSP，此时问题不仅限于找到一条回路了—而是要求找到花费尽可能少的解。1972年，伯克利的Richard M. Karp证明了Hamilton回路问题是NP完备的，那么作为Hamilton回路的扩展—TSP问题也至少具有NP难的特性。截止目前，应用传统方法解决TSP问题的有动态规划法、贪心法、回溯法、分支限界法、线性规划方法以及采用混合策略；而对于在有限时间内寻找尽可能优解的大规模TSP问题，目前更多的倾向于采用随机组合优化搜索方法，如模拟退火、禁忌搜索、神经网络、蚁群算法、遗传算法以及混合策略等。</p>

<p> 应当注意的是，一个实用的TSP解决方案，通常包括了两个阶段的改进算法，即第一步的初始路径生成和第二步的优化算法。当然，由于本文并非是研究某种特定的算法及其改进，因此并不会突出介绍其中某一个阶段。下面我们就常用的解决方法进行介绍并做简单评价。</p>

<p> <strong>动态规划</strong></p>

<p><span style="color: #000000;"> DP思路清晰，易于实现。显然很方便就能找到TSP的最优子结构，从而给出基本的状态转移方程Mk(i,V) = min(Mk-1(j,V{j}),dij)。需要指出的是，DP解决这一类图论问题都具有较高的时间和空间复杂度，一般可用于求解问题规模较小的TSP问题。</span></p>

<p><span style="color: #000000;"> <strong>贪心思想</strong></span></p>

<p><span style="color: #000000;"> Greedy为我们贡献了许多著名的图论算法，如Dijkstra的SSP、Prim和Kruskal的MST等等。然而贪心多用于求近似解，而非定格于最优值。目前贪心思想常用于辅助随机搜索算法，类似一种启发式机制，但初始解在许多情况下与最优解相距较远。</span></p>

<p><span style="color: #000000;"> <strong>回溯法</strong></span></p>

<p><span style="color: #000000;"> 一般的TSP问题可以简单归纳为排列树问题，那么应用回溯法的确可以得出最优解。问题在于，回溯法的解空间非常庞大，一般的剪枝方法并不十分有效，其时间复杂度上界甚至达到n!。然而通过DP思想的启发，我们可以尝试设计一种自顶向下的动态规划算法解决TSP问题，即备忘录方法。备忘录方法相当于搜索和DP的一种折衷，但也丝毫没有改善较高空间复杂度的问题。</span></p>

<p><span style="color: #000000;"> <strong>分支限界法</strong></span></p>

<p><span style="color: #000000;"> BB也是一种解空间搜索方法，但和回溯法有明显区别。回溯法通常是一种DFS搜索方法，而BB实际上是一种BFS方法。其中采用队列式的BB方法本质上就是BFS，只不过添加了一定程度上的剪枝策略。而采用优先队列的BB倾向于寻找一个最优解，在许多最优化问题中，如果限界函数和优先队列设计得当，那么BB的性能要优秀许多。然而不可否认，BB的时间复杂度上界实际上并不比回溯法低。</span></p>

<p><span style="color: #000000;"> <strong>整数线性规划</strong></span></p>

<p><span style="color: #000000;"> 线性规划方法本身就要比TSP问题复杂得多，这里不得不提LP的原因在于，诞生以来计算机科学本应是崇尚应用的科学，尽管学科本身目前还比不上数学、物理学的历史悠久和博大精深，但后者如今基本上需要计算机来完成从理论到实践的跨越。我认为如果一位科学家只热衷于研究理论，那么他应被称作是数学家或者物理学家。</span></p>

<p><span style="color: #000000;"> 这里所说的整数线性规划ILP解决TSP问题，实际上是由美国兰德公司的科学家在上世纪50年代提出的。如今ILP被用于许多学科，最直观的—如现代物流专业，TSP是其必须解决的基本问题之一，目前ILP已成为运筹学中的专门课题。ILP问题描述如下：</span></p>

<p><span style="color: #000000;"> 试求min(c<strong>x</strong>)，使其满足A<strong>x</strong>=<strong>b</strong>，其中A为m*n矩阵，<strong>x</strong>为n维列向量，<strong>x</strong>&gt;=0。</span></p>

<p><span style="color: #000000;"> 根据数据特征的不同，ILP问题又可分为0-1ILP问题、混合ILP问题和纯ILP问题。一般的TSP问题可描述为典型的0-1ILP问题，故可用各种基于线性规划单纯形算法的割平面方法尝试解决。</span></p>

<p> 实际上，针对大规模TSP问题，现有的确定性方法已经很难在规定时间内得出较好的解—当然，如果不计耗费，那么上述算法恐怕还是得到最优解的截至目前的绝对保证，其花费甚至达到了数百CPU年。那么，许多智能算法的大行其道也就有其合理性了。唯一的问题在于，大部分智能算法来源于生物、物理学仿真和人工智能，学习和理解起来并不容易，更何况要用于解决实际问题。况且当前智能算法的“遍地开花”也表明，此类方法的稳定性和准确性还需得到进一步检验和完善。</p>

<p> 由于时间紧张（万恶的项目居然又延期&hellip;），我们这里无法再就智能算法做进一步展开了。下个月的文章里，我们将尝试介绍并实现一种应用确定性方法和智能算法解决类TSP（难度超过非对称TSP）问题的例子。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一种数字图像无损压缩算法——基于动态规划方法]]></title>
    <link href="http://www.hanyi.name/blog/2010/10/03/yi-zhong-shu-zi-tu-xiang-wu-sun-ya-suo-suan-fa-ji-yu-ji-yu-dong-tai-gui-hua/"/>
    <updated>2010-10-03T15:24:19+08:00</updated>
    <id>http://www.hanyi.name/blog/2010/10/03/yi-zhong-shu-zi-tu-xiang-wu-sun-ya-suo-suan-fa-ji-yu-ji-yu-dong-tai-gui-hua</id>
    <content type="html"><![CDATA[<h3>前言</h3>


<p> 本文是基于9月29日的算法设计与分析课程上所讨论的内容总结而成的。因为受到ppt版面所限，原题目中并无“数字”两字，考虑到准确性这里重新补上。由于时间比较仓促且能力所限，意识到有些问题在课堂上可能没有阐述清楚，因此在这里把已经提到的和未能提到的问题汇总成篇，以备参考。</p>

<p> 我本人的参考书是福州大学王晓东的《计算机算法设计与分析(第3版)》(下称“王书”)，本课对应于原书第三章第七节的部分内容，当然课堂上我们曾提出王书中有部分不妥之处，并提出了初步的改进建议，这里仍将保留该部分内容。</p>

<h3>问题提出</h3>


<p> 众所周知，数字图像压缩问题是随着网络通信技术的不断发展而提出的。通常把图像数据压缩方案分为两类：有损图像压缩和无损图像压缩。有损图像压缩通常能够达到很高的压缩率，但是其在采样和频域变换过程中损失了部分像素真值，从而导致图像质量有一定下降。当前常见的数字图像压缩技术有JPEG、MPEG（主要应用于运动图像压缩）等。无损图像压缩从字面意思上理解就是不会降低图像质量，但压缩率会变得不太稳定：典型的无损图像压缩实现有两个步骤：去相关性和编码。去相关性的目的就是为了减少图像冗余，这包含字、字节甚至是二进制位的冗余消除，当然消除冗余后的图像数据需要重新编码并给出相应的索引表，从而实现压缩和解压缩。</p>

<p> 这里给出一种数字图像无损压缩方案。<strong>假设数字图像像素点灰度值序列为{p1,p2,&hellip;,pn}，其中整数pi(1≤i≤n)表示像素点i的灰度值，其范围通常为0~255。将像素点序列{p1,p2,&hellip;,pn}分割成m个连续段S1,S2,&hellip;,Sm。第i个像素段Si中(1≤i≤m)，有l[i]个像素，且该段中的所有像素灰度值只用b[i]位表示。确定像素序列{p1,p2,&hellip;,pn}的最优分段，使得依次分段所需的存储空间最小。</strong></p>

<h3>初步分析</h3>


<p> 设t[i]=∑l[k]，1≤k≤i-1，1≤i≤m，则第i个像素段Si为Si={Pt[i]+1,&hellip;,Pt[i]+l[i]}，1≤i≤m。另设hi=上界(log(max(Pk+1)))，其中t[i]+1≤k≤t[i]+l[i]，则有hi≤b[i]≤8。故b<a href="1%E2%89%A4i%E2%89%A4m">i</a>可用3个二进制位表示。另设1≤l[i]≤255，则需用8位表示l[i]，其中1≤i≤m。因此第i个像素段所需的存储空间为l[i]×b[i] +11位。故对于全部像素序列{p1, p2,&hellip;, pn}，需要∑l[i]×b[i]+11m，1≤i≤m。</p>

<h3>确定最优子结构</h3>


<p> 设l[i]，b[i]，1≤i≤m是{p1,p2,&hellip;,pn}的一个最优分段。显然，l[1],b[1]是{p1,&hellip;,pl[1]}的一个最优分段，且l[i],b[i]，2≤i≤m是{pl[1]+1,&hellip;,pn}的一个最优分段。</p>

<p> 这部分的证明应用反证法，大体思路如下：已知{p1,p2,&hellip;,pn}有最优分段l[i],b<a href="1%E2%89%A4i%E2%89%A4%20m">i</a> ，最优总存储空间为Θ。假设上述结论中的l[1],b[1]和l[i],b[i]，2≤i≤m不全是相应序列的最优分段，由上部分最后一个公式可得该分段存储空间Θ&#8217;&gt;Θ，这与已知l[i],b<a href="1%E2%89%A4i%E2%89%A4%20m">i</a> 为最优分段相矛盾，故假设不成立。</p>

<h3>重叠子问题和状态转移方程</h3>


<p>设s[i]，1≤i≤n是像素序列{p1,p2,&hellip;,pn}的最优分段所需的存储位数。由最优子结构性质知：</p>

<p>s[i]=min{s[i-k]+k*bmax(i-k+1,i)}+11，其中bmax(i,j)=上界(log(max{Pk}+1))，1≤k≤min(i,256)。</p>

<h3>动态规划算法设计</h3>


<p>[code]Compress(n,p,s,l,b)
 for i &lt;- 1 to n
  b[i] &lt;- length(p[i]); //length:log(p[i])
  bmax &lt;- b[i];
  s[i] &lt;- s[i-1] + bmax;
  l[i] &lt;- 1;
  for j &lt;- 2 to i and Lmax //Lmax=256
   if bmax &lt; b[i-j+1]
    then bmax &lt;- b[i-j+1];
   if s[i] &gt; s[i-j] + j * bmax
    then  s[i] &lt;- s[i-j] +j*bmax;
     l[i] &lt;- j;
  s[i] &lt;- s[i] + header; //header=11[/code]</p>

<h3>计算复杂度</h3>


<p> 空间复杂度O(n)。</p>

<p> 时间复杂度分析：</p>

<p>[code]for i &lt;- 1 to n
  &hellip;
  for j &lt;- 2 to i and Lmax //Lmax=256
   &hellip;[/code]</p>

<p>因此亦为O(n)。</p>

<h3>构造最优解</h3>


<p> 在构造出最优解之前我们先举例给出上述动态规划算法的结果。例如：</p>

<p> 输入像素序列:196,120,48,5,2,1。 那么计算后得出：s={19,27,35,43,51,55}，l={1,2,3,4,5,3}，b={8,7,6,3,2,1}。由王书P71第二句知：“最优分段的最后一段的段长度和像素位数分别存储于l[n]和b[n]中”。简单验证可知，l的定义是正确的，<strong>但是b无法满足无损压缩的要求</strong>。这是因为，由王书算法计算后得出，{5,2,1}为最优分段的第二段，同时该段像素位数为1位，显然，1位空间仅能保留像素1的信息，而前面的5、2均会丢失。这就是我们指出的<strong>王书中可能存在的错误</strong>。如果沿用书中的动态规划算法，那么正确的描述应为：<strong>最优分段的最后一段的段长度存储于l[n]中，其相应的像素位数应是max{b[n-l[n]+1],&hellip;,b[n]}。其前一段的段长度应为l[n-l[n]]，而对应的像素位数如下：max{b[n-l[n-l[n]]+1],&hellip;b[n-l[n]]}。</strong></p>

<p> 鉴于上述描述比较繁琐，又考虑到保证原算法的正确性，我们给出如下改进的动态规划算法：</p>

<p>[code] declaration B[n]    // global
Compress(n,p,s,l,b)
 for i &lt;- 1 to n
  b[i] &lt;- length(p[i]); //length:log(p[i])
  bmax &lt;- b[i];
  B[i] &lt;- b[i];
  s[i] &lt;- s[i-1] + bmax;
  l[i] &lt;- 1;
  for j &lt;- 2 to i and Lmax //Lmax=256
   if bmax &lt; b[i-j+1]
    then bmax &lt;- b[i-j+1];
   if s[i] &gt; s[i-j] + j * bmax
    then  s[i] &lt;- s[i-j] +j*bmax;
     l[i] &lt;- j;
     for k&lt;- i-j+1 to i
      B[i]&lt;-bmax;
  s[i] &lt;- s[i] + header; //header=11[/code]
 其中数组B是一个全局量，我们用于存储最优分段中的像素位信息，同时在构造最优解的过程中用B替换b作为输入参数，经验证，该程序可以实现题目预设的目标。</p>

<h3>结论</h3>


<p> 我们应用动态规划方法解决了一个较为普通的最优化问题。事实上这种思想可以应用于许多具有类似特征的问题求解中。当然，我们学习动态规划的目的并非是为了求解类似算法竞赛难度的各类习题，而是将这种思想结合进平时对实际问题的解决中，这样的话，我想，DP的魅力将是无穷的。</p>
]]></content>
  </entry>
  
</feed>
