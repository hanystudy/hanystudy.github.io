<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 转载 | Wing of Dream 梦境之翼]]></title>
  <link href="http://www.hanyi.name/blog/categories/zhuan-zai/atom.xml" rel="self"/>
  <link href="http://www.hanyi.name/"/>
  <updated>2015-08-21T10:12:12+08:00</updated>
  <id>http://www.hanyi.name/</id>
  <author>
    <name><![CDATA[Han Yi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[flowingdata:2010年的10个最佳数据可视化工程]]></title>
    <link href="http://www.hanyi.name/blog/2011/02/27/flowingdata-2010-de-10-10-zui-zui-jia-shu-ju-ke-shi-hua-gong/"/>
    <updated>2011-02-27T12:06:30+08:00</updated>
    <id>http://www.hanyi.name/blog/2011/02/27/flowingdata-2010-de-10-10-zui-zui-jia-shu-ju-ke-shi-hua-gong</id>
    <content type="html"><![CDATA[<p> 本周是开学第一周，事务繁多，故无暇进行相关专题讨论了。这里仅转载一篇来自flowingdata的有趣文章，值得一提的是，数据可视化、可视分析等都是最近几年才逐渐兴起的新兴科学，尽管下面这篇文章仅仅能代表原作者的个人观点，但我们似乎能从中一窥可视化技术在未来的科学和经济价值。</p>

<p> <a href="http://flowingdata.com/2010/12/14/10-best-data-visualization-projects-of-the-year-%E2%80%93-2010/" target="_blank">10 Best Data Visualization Projects of the Year – 2010</a></p>

<p> 同时，这里给出译言网相应译文地址：</p>

<p> <a href="http://article.yeeyan.org/view/191841/163084"><a href="http://article.yeeyan.org/view/191841/163084">http://article.yeeyan.org/view/191841/163084</a></a></p>

<p> 最后，在这里贴一张同样是来自flowingdata的图片(原作者是Moritz Resl)。</p>

<p> <a href="http://flowingdata.com/wp-content/uploads/2011/02/Life-flow-575x575.jpg"><img class="alignnone" title="life-flow" src="http://flowingdata.com/wp-content/uploads/2011/02/Life-flow-575x575.jpg" alt="" width="518" height="518" /></a></p>

<p> 对于这张过于“简单”的状态图，Moritz在swiss-miss上也给出了自己的解释：</p>

<p> <em>Let&rsquo;s not forget though that sometimes doing stuff you like leads to sad, and more importantly, doing stuff you don&rsquo;t like can lead to happy.</em></p>

<p> 我想，到目前为止这句话至少有半句是对的，因为你必须了解：</p>

<p> <em>What&rsquo;s something you really like,more.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qt与现有系统字符集的兼容问题研究]]></title>
    <link href="http://www.hanyi.name/blog/2011/02/18/Qt-yu-xian-you-xi-tong-zi-fu-ji-de-jian-rong-wen-ti-yan-jiu/"/>
    <updated>2011-02-18T19:04:07+08:00</updated>
    <id>http://www.hanyi.name/blog/2011/02/18/Qt-yu-xian-you-xi-tong-zi-fu-ji-de-jian-rong-wen-ti-yan-jiu</id>
    <content type="html"><![CDATA[<p>本文是假期完成的最后一篇文章，之后我将回到学校，届时更新频率将恢复为每周0-2篇左右。</p>

<p>众所周知，Qt在国际化方面的实现是非常方便的。但有时我们会面临一些问题，如在Windows系统中GB2312/GBK和unicode字符集的不兼容，以及在与现有网络程序实现通信的过程中发生的字符集不兼容问题。当然，此类问题可能比较罕见，而且事实上不只Qt面临这一棘手的情况。经过查阅一些资料并进行实践开发，我们相信Qt提供了目前最为便捷的字符集兼容解决方案。我们的最终应用是实现与Unix/Windows主机上的现有服务端程序进行通信，以实现如http、ftp等低级别应用层协议。</p>

<p>首先介绍GB2312-80、BIG-5、Unicode、GBK以及GB18030。</p>

<p><strong>====================以下内容来自wikipedia====================</strong></p>

<p><strong>
</strong></p>

<p><strong>GB2312-80</strong>是中国国家标准简体中文字符集，全称《信息交换用汉字编码字符集-基本集》，又称GB0，由中国国家标准总局发布，1981年5月1日实施。GB2312中对所收汉字进行了“分区”处理，每区含有94个汉字／符号。这种表示方式也称为区位码。其中：01-09区为特殊符号；16-55区为一级汉字，按拼音排序；56-87区为二级汉字，按部首／笔画排序；10-15区及88-94区则未有编码。</p>

<p>在使用GB2312的程序通常采用EUC储存方法，以便兼容于ASCII。浏览器编码表上的“GB2312”，通常都是指“EUC-CN”表示法。每个汉字及符号以两个字节来表示。第一个字节称为“高位字节”，第二个字节称为“低位字节”。“高位字节”使用了0xA1-0xF7（把01-87区的区号加上0xA0），“低位字节”使用了0xA1-0xFE（把01-94加上0xA0）。由于一级汉字从16区起始，汉字区的“高位字节”的范围是0xB0-0xF7，“低位字节”的范围是0xA1-0xFE，占用的码位是72*94=6768。其中有5个空位是D7FA-D7FE。</p>

<p><strong>Big5</strong>，又称为大五码或五大码，是使用繁体中文社区中最常用的电子计算机汉字字符集标准，共收录13,060个汉字。Big5码是一套双字节字符集，使用了双八码存储方法，以两个字节来安放一个字。第一个字节称为“高位字节”，第二个字节称为“低位字节”。“高位字节”使用了0x81-0xFE，“低位字节”使用了0x40-0x7E，及0xA1-0xFE。</p>

<p><strong>Unicode</strong>是为了解决传统的字符编码方式的局限而产生的，例如ISO 8859所定义的字符虽然在不同的国家中广泛地使用，可是在不同国家间却经常出现不兼容的情况。很多传统的编码方式都具有一个共同的问题，即其容许电脑进行双语环境式的处理（通常使用拉丁字母以及其本地语言），但却无法同时支持多语言环境式的处理（指可同时处理混合多种语言的情况）。</p>

<p>大概来说，Unicode编码系统可分为编码方式和实现方式两个层次。</p>

<p>1、编码方式</p>

<p>Unicode的编码方式与ISO 10646的通用字符集（Universal Character Set，UCS）概念相对应，目前实际应用的Unicode版本对应于UCS-2，使用16位的编码空间。也就是每个字符占用2个字节。这样理论上一共最多可以表示216即65536个字符。基本满足各种语言的使用。实际上当前版本的Unicode尚未填充满这16位编码，保留了大量空间作为特殊使用或将来扩展。上述16位Unicode字符构成基本多文种平面（Basic Multilingual Plane，简称BMP）。最新（但未实际广泛使用）的Unicode版本定义了16个辅助平面，两者合起来至少需要占据21位的编码空间，比3字节略少。但事实上辅助平面字符仍然占用4字节编码空间，与UCS-4保持一致。未来版本会扩充到ISO 10646-1实现级别3，即涵盖UCS-4的所有字符。UCS-4是一个更大的尚未填充完全的31位字符集，加上恒为0的首位，共需占据32位，即4字节。理论上最多能表示231个字符，完全可以涵盖一切语言所用的符号。BMP字符的Unicode编码表示为U+hhhh，其中每个h 代表一个十六进制数位。与UCS-2编码完全相同。对应的4字节UCS-4编码后两个字节一致，前两个字节的所有位均为0。</p>

<p>2、实现方式</p>

<p>Unicode的实现方式不同于编码方式。一个字符的Unicode编码是确定的。但是在实际传输过程中，由于不同系统平台的设计不一定一致，以及出于节省空间的目的，对Unicode编码的实现方式有所不同。Unicode的实现方式称为Unicode转换格式（Unicode Translation Format，简称为UTF）。</p>

<p>例如，如果一个仅包含基本7位ASCII字符的Unicode文件，如果每个字符都使用2字节的原Unicode编码传输，其第一字节的8位始终为0。这就造成了比较大的浪费。对于这种情况，可以使用UTF-8编码，这是一种变长编码，它将基本7位ASCII字符仍用7位编码表示，占用一个字节（首位补0）。而遇到与其他Unicode字符混合的情况，将按一定算法转换，每个字符使用1-3个字节编码，并利用首位为0或1进行识别。这样对以7位ASCII字符为主的西文文档就大大节省了编码长度（具体方案参见UTF-8）。类似的，对未来会出现的需要4个字节的辅助平面字符和其他UCS-4扩充字符，2字节编码的UTF-16也需要通过一定的算法进行转换。再如，如果直接使用与Unicode编码一致（仅限于BMP字符）的UTF-16编码，由于每个字符占用了两个字节，在Macintosh (Mac)机和PC机上，对字节顺序的理解是不一致的。这时同一字节流可能会被解释为不同内容，如某字符为十六进制编码4E59，按两个字节拆分为4E和59，在Mac上读取时是从低字节开始，那么在Mac OS会认为此4E59编码为594E，找到的字符为“奎”，而在Windows上从高字节开始读取，则编码为U+4E59的字符为“乙”。就是说在Windows下以UTF-16编码保存一个字符“乙”，在Mac OS里打开会显示成“奎”。此类情况说明UTF-16的编码顺序若不加以人为定义就可能发生混淆，于是在UTF-16编码实现方式中使用了大端序（Big-Endian， 简写为UTF-16 BE）、小端序（Little-Endian，简写为UTF-16 LE）的概念，以及可附加的字节顺序记号解决方案，目前在PC机上的Windows系统和Linux系统对于UTF-16编码默认使用UTF-16 LE。</p>

<p>此外Unicode的实现方式还包括UTF-7、Punycode、CESU-8、SCSU、UTF-32等，这些实现方式有些仅在一定的国家和地区使用，有些则属于未来的规划方式。目前通用的实现方式是UTF-16小尾序（LE）、UTF-16大尾序（BE）和UTF-8。在微软公司Windows XP操作系统附带的记事本（Notepad）中，“另存为”对话框可以选择的四种编码方式除去非Unicode编码的ANSI（对于英文系统即ASCII编码，中文系统则为GB2312或Big5编码） 外，其余三种为“Unicode”（对应UTF-16 LE）、“Unicode big endian”（对应UTF-16 BE）和“UTF-8”。</p>

<p>目前辅助平面的工作主要集中在第二和第三平面的中日韩统一表意文字中，因此包括GBK、GB18030、Big5等简体中文、繁体中文、日文、韩文以及越南喃字的各种编码与Unicode的协调性被重点关注。考虑到Unicode最终要涵盖所有的字符，从某种意义而言，这些编码方式也可视作Unicode的出现于其之前的既成事实的实现方式，如同ASCII及其扩展Latin-1一样，后两者的字符在16位Unicode编码空间中的编码第一字节各位全为0，第二字节编码与原编码完全一致。但上述东亚语言编码与Unicode编码的对应关系要复杂得多。</p>

<p><strong>GBK</strong>即汉字内码扩展规范，K为汉语拼音 Kuo Zhan（扩展）中“扩”字的声母。英文全称Chinese Internal Code Specification。字符有一字节和双字节编码，00–7F范围内是一位，和ASCII保持一致，此范围内严格上说有96个文字和32个控制符号。之后的双字节中，前一字节是双字节的第一位。总体上说第一字节的范围是81–FE（也就是不含80和FF），第二字节的一部分领域在40–FE，其他领域在80–FE。</p>

<p><strong>GB18030</strong>，全称：国家标准GB 18030-2005《信息技术中文编码字符集》，是中华人民共和国现时最新的内码字集，是GB 18030-2000《信息技术信息交换用汉字编码字符集 基本集的扩充》的修订版。与GB 2312-1980完全兼容，与GBK基本兼容，支持GB 13000及Unicode的全部统一汉字，共收录汉字70244个。</p>

<p>GB 18030主要有以下特点：与 UTF-8 相同，采用多字节编码，每个字可以由1个、2个或4个字节组成。编码空间庞大，最多可定义161万个字符。支持中国国内少数民族的文字，不需要动用造字区。汉字收录范围包含繁体汉字以及日韩汉字。</p>

<p>GB 18030的字节结构如下：单字节，其值从0到0x7F。双字节，第一个字节的值从0x81到0xFE，第二个字节的值从0x40到0xFE（不包括0x7F）。四字节，第一个字节的值从0x81到0xFE，第二个字节的值从0x30到0x39，第三个字节从0x81到0xFE，第四个字节从0x30到0x39。</p>

<p><strong>====================以上内容来自wikipedia====================</strong></p>

<p><strong>
</strong></p>

<p>事实上，上述wiki内容是没有必要细究的:)，下面进入正题。</p>

<p>Qt中的内置字符串类为QString，它是以16位unicode编码（unicode 4.0/unicode-16）存储的。QString被应用于所有涉及字符串操作的API中，也就是说，如果你要用Qt构建应用程序，那么研究QString是不可避免的。</p>

<p>下面是一种比较自由的字符集转换方式:</p>

<p>[code]
QByteArray encodedString = &quot;mp77的技术交流频道&quot;;    //为什么要用QByteArray?
QTextCodec *codec = QTextCodec::codecForName(&quot;gb2312&quot;);
QString string = codec-&gt;toUnicode(encodedString);
[/code]</p>

<p>QTextCodec为我们提供了针对超过30种常用字符集间互相转换的机制，但这种简单实现代码量较大，不适合字符串操作较多的情况。那么下面这种方案则受到广大程序员的欢迎：</p>

<p>[code]
QTextCodec::setCodecForTr(QTextCodec::codecForName(&quot;gb2312&quot;)); //beginning of code
&hellip;&hellip;
QString string = QObject::tr(&quot;mp77的技术交流频道&quot;);
[/code]</p>

<p>QTextCodec提供了一种类似国际化接口的操作，所有的字符集规定在代码行首部完成，之后只需要借助国际化的方法初始化任意字符串即可（尽管这与真正的国际化功能有所区别）。现在我们解释首段代码中为何使用QByteArray接收中文字符串，如果不做任何处理直接运行：</p>

<p>[code]
QString string = &quot;mp77的技术交流频道&quot;;
[/code]</p>

<p>由于系统采用ANSI编码(包括Multi-Byte Chactacter System，MBCS字符集)，那么上述语句执行后，字符串string在内存中的内容实际上是以ANSI编码。由于对ansi的操作与unicode完全不兼容，那么此后QT中所有的字符串操作都会受到影响，最终输出时就会出现所谓的“乱码”。因此，类似的直接赋值形式应当尽量避免。</p>

<p>我们注意到在vc6时代经常采用以下赋值方式：</p>

<p>[code]
const char* string = &quot;mp77的技术交流频道&quot;;
[/code]</p>

<p>这一句包括了申请内存、写入内容并以“\0”结尾等操作，其在内存中的字符编码形态自然也是ANSI的。Qt特别提供的QByteArray类就是为了兼容这种情况，而且官方手册声称它比const char *的声明初始化方式要好很多（如采用implicit sharing，简单地说就是COW技术），而且使用上也方便许多。</p>

<p>这里介绍一个我们在实际应用中遇到的例子。题目是实现FTP协议，当然，要想实现一个稳定的FTP协议难度并不小，这主要是因为相关RFC文档并没有提供足够的协议细节，导致目前几乎没有绝对通用的FTP服务端或客户端。当然，目前仍有能够兼容大多数平台的客户端/服务端程序，且在日常使用中似乎没有发现什么问题。</p>

<p>Qt实现FTP客户端很容易——只要使用现成的QFtp即可，但关键的服务端需要手动完成了。我们在使用cuteFTP和FlashFXP这种常用客户端软件进行测试时立即发现了一个严重问题，即服务端返回的目录list中出现汉字乱码。我们检查了服务端生成目录list的函数，并未对任何字符串进行编码操作。于是直接在服务端socket的数据信息中添加了toUtf8的操作。事实表明这一修改没有解决任何问题。</p>

<p>继续检查后我们注意到类似如下一行关键代码：</p>

<p>[code]</p>

<p>QString string;</p>

<p>string = &quot;&hellip;&quot;;</p>

<p>&hellip;</p>

<p>string += local.toString(fileinfo.lastModified(),&quot; MMM dd yyyy &quot;) + filename+&quot;\r\n&quot;;</p>

<p>[/code]</p>

<p>上面实际上利用了QString对+/+=的重载进行字符串的简单构建，其中filename是出现乱码的地方——也就是唯一存在中文可能的文件或目录名称。由于字符串常量的存在，我们对string进行直接赋值实际上就导致内存信息为ansi编码，而filename来自于fileinfo.completeBaseName()，是Qt有关目录操作函数返回的文件名信息，其编码自然是utf-16。查阅QString对+/+=的重载说明知，Qt为了提升字符串操作的性能，只是在目标字符串的尾部申请了一块额外的内存空间，并直接将源字符串所在的内存块复制到新空间中。由此可见，string中实际上是ansi和utf-16两种编码的字符串混合，无论我们今后采用何种编码转换方式，都无法实现完整内容的正确转换。</p>

<p>一种解决方案是：</p>

<p>[code]</p>

<p>QString string;</p>

<p>string = &quot;&hellip;&quot;;</p>

<p>&hellip;</p>

<p>string += local.toString(fileinfo.lastModified(),&quot; MMM dd yyyy &quot;) + filename.toLocal8Bit()+&quot;\r\n&quot;;</p>

<p>[/code]</p>

<p>toLocal8Bit函数返回的是QByteArray类型的本地字符集串，如此就能保证string保持唯一的字符集了。</p>

<p>近期的文章中我们将介绍如何使用Qt构建网络应用程序，并提供一个代码示例。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing the Google Chrome OS]]></title>
    <link href="http://www.hanyi.name/blog/2009/07/08/introducing-the-google-chrome-os/"/>
    <updated>2009-07-08T20:44:23+08:00</updated>
    <id>http://www.hanyi.name/blog/2009/07/08/introducing-the-google-chrome-os</id>
    <content type="html"><![CDATA[<p> (from hanyi.name on Twitter)Seems that we have been missed some reprinting for several months,while just 12 hours ago Google INTRODUCED its browser-based OS named Google Chrome OS on its official blog.No doubt the new project will stimulate open source community,or its competitors(e.g. MS)?We believe that tendency will be clear soon&hellip;Here&#8217;s the article by Sundar Pichai from blogspot.</p>

<p> It&rsquo;s been an exciting nine months since we launched the Google Chrome browser. Already, over 30 million people use it regularly. We designed Google Chrome for people who live on the web — searching for information, checking email, catching up on the news, shopping or just staying in touch with friends. However, the operating systems that browsers run on were designed in an era where there was no web. So today, we&rsquo;re announcing a new project that&rsquo;s a natural extension of Google Chrome — the Google Chrome Operating System. It&rsquo;s our attempt to re-think what operating systems should be.</p>

<p>Google Chrome OS is an open source, lightweight operating system that will initially be targeted at netbooks. Later this year we will open-source its code, and netbooks running Google Chrome OS will be available for consumers in the second half of 2010. Because we&rsquo;re already talking to partners about the project, and we&rsquo;ll soon be working with the open source community, we wanted to share our vision now so everyone understands what we are trying to achieve.</p>

<p>Speed, simplicity and security are the key aspects of Google Chrome OS. We&rsquo;re designing the OS to be fast and lightweight, to start up and get you onto the web in a few seconds. The user interface is minimal to stay out of your way, and most of the user experience takes place on the web. And as we did for the Google Chrome browser, we are going back to the basics and completely redesigning the underlying security architecture of the OS so that users don&rsquo;t have to deal with viruses, malware and security updates. It should just work.</p>

<p>Google Chrome OS will run on both x86 as well as ARM chips and we are working with multiple OEMs to bring a number of netbooks to market next year. The software architecture is simple — Google Chrome running within a new windowing system on top of a Linux kernel. For application developers, the web is the platform. All web-based applications will automatically work and new applications can be written using your favorite web technologies. And of course, these apps will run not only on Google Chrome OS, but on any standards-based browser on Windows, Mac and Linux thereby giving developers the largest user base of any platform.</p>

<p>Google Chrome OS is a new project, separate from Android. Android was designed from the beginning to work across a variety of devices from phones to set-top boxes to netbooks. Google Chrome OS is being created for people who spend most of their time on the web, and is being designed to power computers ranging from small netbooks to full-size desktop systems. While there are areas where Google Chrome OS and Android overlap, we believe choice will drive innovation for the benefit of everyone, including Google.</p>

<p>We hear a lot from our users and their message is clear — computers need to get better. People want to get to their email instantly, without wasting time waiting for their computers to boot and browsers to start up. They want their computers to always run as fast as when they first bought them. They want their data to be accessible to them wherever they are and not have to worry about losing their computer or forgetting to back up files. Even more importantly, they don&rsquo;t want to spend hours configuring their computers to work with every new piece of hardware, or have to worry about constant software updates. And any time our users have a better computing experience, Google benefits as well by having happier users who are more likely to spend time on the Internet.</p>

<p>We have a lot of work to do, and we&rsquo;re definitely going to need a lot of help from the open source community to accomplish this vision. We&rsquo;re excited for what&rsquo;s to come and we hope you are too. Stay tuned for more updates in the fall and have a great summer.</p>

<p>Posted by Sundar Pichai, VP Product Management and Linus Upson, Engineering Director</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NURBS简介]]></title>
    <link href="http://www.hanyi.name/blog/2009/01/01/NURBS-jian-jie/"/>
    <updated>2009-01-01T20:59:29+08:00</updated>
    <id>http://www.hanyi.name/blog/2009/01/01/NURBS-jian-jie</id>
    <content type="html"><![CDATA[<p> 非均匀有理样条（NURBS）（non uniform rational B-spline），是在<span style="color: #000000;">计算机图形学</span>中常用的数学模型，用于产生和表示曲线及曲面。</p>

<p> NURBS的发展始于1950年代，它是由需要像在车体和船壳中使用的自由曲面的数学上的精确表示的工程师们所发现的，它可以在任何技术上需要的时候精确的复制出来。以前这类曲面的表示只存在于设计者创建的实体模型。该发展的先驱包括：皮埃尔·贝兹（Pierre Bézier）， 他曾是Renault的工程师，以及Paul de Casteljau，他在Peugeot工作，两个都是法国的。贝兹基本是和de Casteljau独立发展的，两人互相不知道对方的工作。但是因为贝兹发表了他的工作的结果，今天的一般的计算机图形学用户认为样条 &ndash; 通过在曲线上的控制点表示的那类 - 为贝兹样条，而de Casteljau的名字仅作为他为计算参数化曲面所设计的算法而为人所知。在1960年代，人们认识到非均匀有理基本样条是贝兹曲线的一个推广，而贝兹曲线可以视为均匀非有理B样条。</p>

<p>最初NURBS仅用于汽车公司私有的计算机辅助设计包。后来它们成为标准计算机图形包的一部分，包括OpenGL图形库。</p>

<p>NURBS曲线和曲面的实时、交互绘制最初由Silicon Graphics工作站于1989年提供。在1993年，CAS Berlin（一个和柏林工大合作的小创业公司）开发了第一个个人机上的交互式NURBS建模器，称为NöRBS。今天多数台式机上的专业计算机图形应用程序提供NURBS技术，一般通过集成一个从专用公司来的NURBS引擎。</p>

<p>NURBS对于计算机辅助设计、制造和工程（CAD，CAM，CAE）是几乎无法回避的，并且是很多业界广泛采用的标准的一部分，例如IGES， STEP，和PHIGS。</p>

<p>但还是有很多它们在交互式建模中的优点和有用性的错误观念，主要是由于关于单一软件包及其用户界面的易用性而得出的猜测。 通常，据说编辑NURBS曲线和曲面是高度直观和可预测的。控制点总是直接连接到曲线或曲面上或象是通过一根橡皮筋连接。根据用户界面的类型，编辑可以通过它们各自的控制点实现，这对于贝兹曲线是最显然和最一般的，或者也可以通过高层的工具，例如样条建模或者层次结构的编辑。高层工具可以设计得很强大，并得益于NURBS创建和建立不同层次的连续性的能力： c0连续性表示连通性，c1连续性可以视为没有尖角，而c2连续性通常称为几何连续性，视觉上也就是“光滑”的东西，用NURBS还可以达到更高阶的连续性，它们可以导致&#8221;亮度连续性&#8221;。这被新车模型的摄影师所倚重，他们热衷于展示霓虹灯在车身上的镜像。灯光可以展示出完美的光滑度，这在没有NURBS的情况下实际上是不可能。</p>

<p>一条NURBS曲线用一个带比重控制点和曲线的次序以及一个节点向量的集合定义。NURBS是B-样条和贝兹曲线和曲面两者的推广，其主要差别在于控制点的比重，这使它们成为有理的（非有理B-样条是有理B-样条的特殊情形）。 NURBS曲线在一个参数方向上演变，通常内部用&rsquo;s&#8217;参数代表，而NURBS曲面在两个参数方向上演变。 所以，通过计算NURBS曲线的s-参数，它可以在三维空间中表示，通过计算NURBS曲面的s和t它也可以在三维空间中表示。 推广意味着：一条贝兹曲线总是一条NURBS曲线，就像狗总是动物。反过来则不总是成立，一条NURBS曲线可以是一条贝兹曲线，就像一个动物可以是一条狗。</p>

<p>NURBS有用的原因有很多条：他们</p>

<p>在仿射变换下不变也在投影变换下不变；
提供了标准解析形体（例如圆锥曲面）和自由曲面两者的共同数学形式；
提供了设计一大类形体的灵活性；
减少了存储形体的内存消耗（和更简单的方法相比）；
可以用数值上稳定和精确的算法较快的计算；
是非有理B-样条和非有理和有理贝兹曲线和曲面的推广。
节点向量是一个参数值的序列，用于决定控制点在何处和如何影响NURBS曲线。节点的个数总是等于控制点的个数加上曲线的阶数。节点必须只是用于内部计算，因而一般对于软件的终端用户来说是没有帮助的、不可编辑、甚至不可以见的。</p>

<p>节点向量的值必须升序：下面的向量是正确的：[0 0 1 2 3]，而接下来这个不是：[0 0 2 1 3]。也要注意唯一重要的因素是值之间的比例：节点向量[0 0 1 2 3]，[0 0 2 4 6]和[1 1 2 3 4]产生相同的曲线。不可以有比曲线的度数更多的重合值：节点的重复度≤度数。 对于一阶NURBS，每个节点和一个控制点结对。</p>

<p>曲线的序大于或等于2，对应与一条线性曲线（序=2，表示一条直线），一条二次曲线（序=3)以及一条三次曲线（序=4）。数学上曲线用同阶的多项式表示，一条三次曲线用3阶多项式表示，其序为4。另外，控制点的个数必须等于或大于曲线的序。实践上，3阶的三次类型是表示曲线和曲面时最常用的。而4次或5次的有时候有用，特别是用于导数，更高阶实际上从来不用因为他们经常导致内部数值问题并趋向于消耗更多的不必要的计算。</p>

<p>非有理曲线有时不够用，例如用于表示圆。 这是表示一个XY平面上的均匀的圆的控制点，第四个参数是比重：
   cp_circle[0] = Controlpoint( 1、 0、0、     1);
   cp_circle[1] = Controlpoint( 1、 1、0、sqrt(2) / 2.0);
   cp_circle[2] = Controlpoint( 0、 1、0、     1);
   cp_circle[3] = Controlpoint(-1、 1、0、sqrt(2) / 2.0);
   cp_circle[4] = Controlpoint(-1、 0、0、     1);
   cp_circle[5] = Controlpoint(-1、-1、0、sqrt(2) / 2.0);
   cp_circle[6] = Controlpoint( 0、-1、0、     1);
   cp_circle[7] = Controlpoint( 1、-1、0、sqrt(2) / 2.0);
   cp_circle[8] = Controlpoint( 1、 0、0、     1);</p>

<p><strong>ps:thanks for wikipedia&amp;university of bristol.</strong></p>

<p><strong>评论突破3600&hellip;即日起暂闭清理&hellip;</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JNI技术初步(五)]]></title>
    <link href="http://www.hanyi.name/blog/2008/10/18/JNI-ji-shu-chu-bu-wu/"/>
    <updated>2008-10-18T16:59:48+08:00</updated>
    <id>http://www.hanyi.name/blog/2008/10/18/JNI-ji-shu-chu-bu-wu</id>
    <content type="html"><![CDATA[<p> 总的来说，JNI应当是java初学者须掌握的内容。尽管教科书中涉及的极少，JNI也破坏了java重要的可移植性，但JNI并未因此被弃用，反而被Sun列入JDK不可缺少的一部分——这至少说明了java并非像一些人说得那么神通广大。</p>

<p> 正如原文作者最初所说的，JNI适用于许多程序设计语言，甚至包括汇编程序。但理解了java内涵的人都会小心翼翼去使用JNI，而非将其当成是万能的解决方案。</p>

<p> 感谢本系列第1-4篇文章的原作者，很多是被原文采纳，其余内容也做了详细的参考，在此一并感谢。</p>

<p> cnweblog.com <span style="color: #000000;">刘正伟 </span><span style="color: #000000;"><a href="&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#58;&#115;&#x75;&#x6e;&#x64;&#121;&#50;&#x36;&#x40;&#49;&#x32;&#54;&#46;&#x63;&#x6f;&#109;">&#x73;&#x75;&#x6e;&#100;&#121;&#x32;&#54;&#64;&#49;&#50;&#x36;&#x2e;&#x63;&#x6f;&#109;</a></span></p>

<p> blog.edu.cn  <span class="style3">xdsamuel</span></p>

<p><span class="style3"> gceclub.sun.com.cn Sun中国技术社区 陈健明 华中师范大学网络与通讯研究所 <span style="color: #000000;"><a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#111;&#x3a;&#x63;&#x68;&#x65;&#110;&#106;&#109;&#50;&#x30;&#48;&#x30;&#x40;&#104;&#x6f;&#x74;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;">&#99;&#x68;&#101;&#x6e;&#106;&#x6d;&#50;&#48;&#48;&#x30;&#64;&#104;&#111;&#116;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;</a></span></span></p>
]]></content>
  </entry>
  
</feed>
