<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 可视化 | Wing of Dream 梦境之翼]]></title>
  <link href="http://www.hanyi.name/blog/categories/ke-shi-hua/atom.xml" rel="self"/>
  <link href="http://www.hanyi.name/"/>
  <updated>2015-06-16T13:57:31+08:00</updated>
  <id>http://www.hanyi.name/</id>
  <author>
    <name><![CDATA[Han Yi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kinect的三维重建(1)]]></title>
    <link href="http://www.hanyi.name/blog/2012/06/22/Kinect-de-san-wei-chong-jian-1/"/>
    <updated>2012-06-22T20:35:07+08:00</updated>
    <id>http://www.hanyi.name/blog/2012/06/22/Kinect-de-san-wei-chong-jian-1</id>
    <content type="html"><![CDATA[<p>有关Kinect应用开发正日新月异，稍有懈怠就会被远远甩在身后。不过，Kinect目前带给我们的仍只是一个充满无限可能的远景，正如App store能吸引年仅<a href="http://www.cnbeta.com/articles/161695.htm">11岁的开发者</a>一样，Kinect未来将对“全民开发者”产生重要推动作用。另一方面，一些基于Kinect的应用研究仍颇复杂，主要是因为一些关键环节的滞后而导致的。2011年的siggraph talks上，<a href="http://research.microsoft.com/en-us/projects/surfacerecon/">KinectFusion</a>首次展示了实时、廉价、轻便的室内场景三维重建，使得我们向着“无处不在的数字化”迈进了一大步。该项目主要由微软剑桥研究院的研究人员发起实施，研究小组目前公开发表了两篇文章：</p>

<p>Shahram Izadi, David Kim, Otmar Hilliges, David Molyneaux, Richard Newcombe, Pushmeet Kohli, Jamie Shotton, Steve Hodges, Dustin Freeman, Andrew Davison, and Andrew Fitzgibbon, <strong>KinectFusion: Real-time 3D Reconstruction and Interaction Using a Moving Depth Camera</strong>, ACM Symposium on User Interface Software and Technology, October 2011</p>

<p>Richard A. Newcombe, Shahram Izadi, Otmar Hilliges, David Molyneaux, David Kim, Andrew J. Davison, Pushmeet Kohli, Jamie Shotton, Steve Hodges, and Andrew Fitzgibbon, <strong>KinectFusion: Real-Time Dense Surface Mapping and Tracking</strong>, in IEEE ISMAR, IEEE, October 2011</p>

<p>除了Microsoft Research外，国内外大量机构都借助Kinect进行相关研究。仅就实时场景三维重建这项应用而言，由开源机器人研发公司Willow Garage在2011年发起的Point Cloud Libary (PCL)就吸引了全世界数十家著名科研机构参与、十余家公司提供经济支持。PCL是一项集点云获取与处理、滤波、特征提取、关键点标定、表面重建和点云配准以及点云融合等功能为一体的开源点云处理库，PCL使用OpenNI作为系统IO接口，实际成为KinectFusion的开源实现项目，该项目的相关论文发表在<a href="http://www.pointclouds.org/assets/pdf/pcl_icra2011.pdf">ICRA2011</a>上。</p>

<p>上述文献可以说是迄今为止有关Kinect的三维重建应用的最佳切入点了。应注意的是这两篇文章讨论重点的区别，前者先是对KinectFusion整个项目进行了流水式说明，随后解释了文中采用的经典算法的GPU实现，开发者可能会比较感兴趣；而后一篇文章则重点讨论了新的并行算法的形式化描述和性能分析，这部分可能会更吸引一部分研究者。我们将采用一种自上而下的方法先对这两篇文章进行简要介绍。</p>

<p><strong> 概述</strong></p>

<p>有关Kinect的结构光技术读者可以参考这篇<a href="http://www.hanyi.name/blog/?p=335">文章</a>或直接去Google下PrimeSense的专利，这里不再赘述。不过，尽管Kinect在获取深度图方面几乎是达到了性能与质量的完美结合，但仍无法避免深度图中大量抖动的产生，如果我们直接对单张深度图进行bilateral filter双边滤波然后重建出网格模型，会发现重建出的模型表面质量较低，甚至出现孔洞的情况。更重要的是，单张深度图能够获得的只是模型在某个视角下所展现出的一部分，而非表示完整的模型。因此，如何改善基于Kinect深度图的模型重建质量，并实现物体的完整重建成为该项技术的关键。</p>

<p>KinectFusion的首要任务就是克服该难题，它允许用户手持Kinect设备在室内场景自由移动，并实现场景的高质量三维重建。同时，KinectFusion还提供了精彩的AR应用，包括前景、背景和人体的分割与重建、以及AR世界中的多点触摸识别技术。</p>

<p><strong>场景重建</strong></p>

<p>基于上述需求，KinectFusion允许用户手持Kinect设备自由探索室内环境，系统将自动跟踪Kinect摄像头的6DOF姿态，然后融合不同时序的深度图数据并重建出场景的全局模型。由于视角的不断变化，Kinect反馈的深度图也会发生改变，这里采用了类似图像超分辨率技术对深度图进行了细节优化，从而提高模型的重建质量。最后利用Kinect自带的RGB数据进行场景纹理映射。</p>

<p>首先如何利用单Kinect摄像头去跟踪它自己的6DOF姿态？这里采用点云模型的刚性配准对齐来计算摄像头在空间中的6DOF变换，点云配准首选经典的ICP[Besl92, RusinKiewicz01]。之前需要将深度图像数据变换至摄像机的空间坐标系中，并计算其对应点的法线信息；然后逐帧采用基于GPU的ICP实现进行模型配准和6DOF计算；在重建部分，KinectFusion并没有直接融合点云或生成网格模型，而是采用了[Curless96]的体集成算法，最终在全局坐标系中生成一个三维体素网格并进行不断更新，每个体素内最终保存了一段时间内从该体素到物理表面上某一点的平均距离。最后使用Raycast给出隐式表面的渲染结果，另一方面，以摄像机位置作为视点做Raycasting，同样能够得到一个具有真实细节的高质量的合成深度图，然后再对其进行下一轮ICP迭代。这就允许我们能够利用合成深度图与下一帧的深度图进行配准，使重建结果的精度不断提高。</p>

<p>具体算法实现采用了CUDA并行架构，算法基本流程如下：</p>

<p>1）深度坐标变换，对于每个像素启用一只CUDA线程，给定一个Kinect红外摄像头的内部校准矩阵K，使用如下公式</p>

<p><img class="aligncenter" title="\textup{v}_{i}(u) = \textup{D}_{i}(u)\textup{K}^{-1}[u ,1]" src="http://latex.codecogs.com/gif.latex?\textup{v}_{i}(u) = \textup{D}_{i}(u)\textup{K}^{-1}[u ,1]" alt="" /></p>

<p>计算坐标变换；相应的顶点法线则直接取其右、下邻向量的外积，并进行归一化。时间i时的6DOF摄像机姿态使用一个刚性变换矩阵T表示，其中T包括了摄像机的旋转矩阵R和平移矩阵t。变换后的顶点和法线通过T即可再变换至全局坐标系中。</p>

<p>2）摄像机跟踪，该部分的主要目的就是计算6DOF姿态。核心的ICP即迭代最近点算法，首要是需要逐帧计算不同朝向的点集的相关度。这里采用了projective data association方法计算相关度。</p>

<p>3）体集成，针对已配准的点云数据，需要执行后续的融合处理，这里采用了经典的[Curless96]体集成方法融合这些点云数据。</p>

<p>4）光线投射渲染，采用光线投射渲染前步生成的隐式表面。</p>

<p>上述整个管线均采用了并行GPU实现，在下文中，我们将重点解析上述算法的CUDA实现细节。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TangleTracer(Basic edition/B) 1.0 beta开源发布]]></title>
    <link href="http://www.hanyi.name/blog/2012/06/08/tangletacerbasic-editionb-1-0-TangleTracer-Basic-edition-B-1-0-beta-kai/"/>
    <updated>2012-06-08T22:32:17+08:00</updated>
    <id>http://www.hanyi.name/blog/2012/06/08/tangletacerbasic-editionb-1-0-TangleTracer-Basic-edition-B-1-0-beta-kai</id>
    <content type="html"><![CDATA[<p>TangleTracer是一个实验性光线跟踪渲染平台，目的在于为真实感绘制技术的初学者提供完备的学习例程和友好的实验接口。系统设计思路主要源于Kevin Suffern的《Ray tracing from the Ground Up》一书，同时部分参考了著名的真实感绘制圣经《PBRT 2nd》。从今年三月中旬起我们就开始了前期的技术储备工作，该项目由四月初正式开始，截至目前完成代码近9万行，系统框架基本完善，实现并调试通过了440个demo或Kevin书中的习题（这部分代码超过4万行）。与K书中提供的原型系统不同，项目开发平台选择了Microsoft Visual Studio 2010和Qt framework 4.7.3，为快速开发提供了良好基础。
由于系统和部分框架来源于K书，我们循例采用GPLv2开源发布。此次发布的主要内容是系统的代码部分，为便于大家测试，我们稍后会提供基于win32平台的二进制版本（目前正在进行兼容性测试），运行系统内置的全部例程需要同时满足以下条件：
1.下载例程所需的纹理包：<a href="http://www.raytracegroundup.com/downloads/TextureImages.zip%EF%BC%9B">http://www.raytracegroundup.com/downloads/TextureImages.zip%EF%BC%9B</a>
2.下载例程所需的模型包：<a href="http://www.raytracegroundup.com/downloads/PLYFiles.zip%EF%BC%9B">http://www.raytracegroundup.com/downloads/PLYFiles.zip%EF%BC%9B</a>
3.确保纹理包的TextureFiles目录和模型包的PLYFiles目录与程序二进制文件位于同一目录下；
4.部分模型需要下载stanford的原始文件并进行替换（具体请阅读README及代码注释）：<a href="http://www-graphics.stanford.edu/data/3Dscanrep/%EF%BC%9B">http://www-graphics.stanford.edu/data/3Dscanrep/%EF%BC%9B</a>
此次发布的是TangleTracer的Basic edition/B版本，其目的在于提供思路清晰的CPU渲染技术，但实际渲染性能较低。我们正在进行系统的并行迁移实现，并力求在下半年提供TangleTracer的GPU edition/G版本。详情请关注项目github主页：<a href="http://mp77.github.com%E3%80%82">http://mp77.github.com%E3%80%82</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[参数化设计/建模及其在艺术创作领域的应用前景]]></title>
    <link href="http://www.hanyi.name/blog/2012/02/02/can-shu-hua-she-ji-jian-mo-ji-qi-zai-yi-shu-chuang-zuo-ling-yu-de-ying-yong-qian-jing/"/>
    <updated>2012-02-02T20:58:30+08:00</updated>
    <id>http://www.hanyi.name/blog/2012/02/02/can-shu-hua-she-ji-jian-mo-ji-qi-zai-yi-shu-chuang-zuo-ling-yu-de-ying-yong-qian-jing</id>
    <content type="html"><![CDATA[<p><strong>一、概述</strong></p>

<p>迄今为止，参数化设计/建模仍代表一种理念，尽管这种理念已经经历了CAD/CAM近五十年的发展历程。系统化的CAD/CAM技术包含两种基本思路，一是使用二维几何原语如点、线或样条表示三维物体，如Bezier、De Casteljau以及Sutherland这些先驱们的工作；明暗处理的需求接着被提出，从而出现了早期着色模型的研究（本文将不涉及这部分内容）；即使是目前最广泛使用的Nurbs，也是A.R. Forrest早在1980年就已经完成了。</p>

<p>另一种思路是使用体素构造表示（CSG）进行实体建模（该技术实际上也诞生于60年代初期），其基本方法是使用一组基本几何体，如球、柱体、椎体等，对其执行交、并、补等布尔运算序列，从而构建复杂三维物体，通常再使用B-Reps表示最终生成的三维模型。这种方法由于能够保持模型拓扑的欧拉示性数V-F+E，有助于满足三维物体的基本几何特征，因而得到了广泛应用。</p>

<p>现在看来，CAD/CAM的关键技术似乎早在30年前就已经比较完整了，那么继续该领域的研究还存在哪些意义？事实上，CAD/CAM目前仍面临许多瓶颈，这些瓶颈已经影响了目前广泛采用此类技术的汽车制造、电子和建筑等行业的进一步发展。例如面向三维模型的可编辑性，模型编辑的目的通常有两类：一是用户设计意图发生变化，需要变更现有设计；二是模型的适用条件发生变化，不得不做出调整以适应新变化：如某些工业组件所面临的不同规格需求。在参数化设计提出之前，针对三维模型的编辑主要采用直观交互式的方法进行，其复杂程度甚至超过最初的建模过程。一些行业专家分析，模型编辑的主要难点在于该过程既要保持原组件的局部特征，还要适应新的条件，同时还要确保这种编辑不会影响组件之间的相互关系；特别重要的是，在整个设计、建模、编辑的过程中要保证一定的数据精度。提高可编辑性一度成为现有CAD/CAM技术的重要研究方向。</p>

<p><strong>二、参数化设计的发展和现状</strong></p>

<p>参数化设计的最初目标就是解决CAD/CAM的上述问题，并取得了一定成果，特别是在建筑业。参数化设计的本质就是使用一系列参数定义三维模型的基本特征，包括基本尺寸、各组件间关系等。在一些文献中，参数化设计也被称为关系型建模或是变量化设计。在参数化设计中，建模原语通过一组参数表示，如使用位置、长度和方向参数表示空间线段，而如果仅涉及到这部分，那么参数化设计似乎与传统的交互式设计并无不同。更进一步，为了保证模型在一定条件下的可编辑性，参数化设计要求用户建立建模规则的参数化表示。如AutoDesk推出的AutoLisp语言，实际上是通过编写脚本制定规则，而把输入参数转化成三维模型的应用在目前已经十分流行了。然而对于绝大多数设计师而言，学习编程语言其实没有太多必要，同样对于一些复杂模型的构造，编程实现会真正意味着缘木求鱼。因此参数化设计需要进一步的形式化、领域化和直观化，才有可能被大多数设计师所接受。</p>

<p>“约束”是参数化设计的一个重要概念，不过其提出要比“参数化设计”本身还早。约束表示针对一个或一组实体的行为关系限定。实体可看作是三维模型的一个组件，实体行为则代表该组件在不同参数下表现出的状态。例如&#8221;一组线段相互平行、垂直或共线&#8221;就是一种约束描述，每条线段受相应参数控制其行为，而各线段的参数却受到“平行、垂直或共线”的关系限定。在带约束的设计和建模过程中，无论是施约束端还是受约束端，都需要得到完整的参数列表才能进行，由于约束的存在，某些参数实际上需要通过“推理”进行估计和计算，这种推理估算参数的过程在很大程度上影响了建模效率。当前应用中普遍存在两类约束：几何约束和物理或称工程约束。平行、垂直、共线、相邻、尺寸等都属于几何约束，此外包括一些物理方程、条件关系等则属于后者。这类方法需要用户在建模初期提供实体类型、空间位置和尺寸参数，然后通过一些具体方法描述实体关系，如前面所述的编程脚本。</p>

<p>1982年，Gossard和Light首次提出了“变量化设计”的概念。此后十年间，由于几何造型、自由曲面和实体建模技术的迅速发展，出现了愈多针对交互性及可编辑性的改进需求。大量工作开始致力于该领域中，如前面介绍的变量化编程的提出，通过编写一段程序脚本控制建模过程，这种方法实际上并不能有效解决存在的问题。而为了保证用户设计意图的准确实现，直观交互通常是必须的，因此提供领域化的参数化设计工具是较为合理的选择。</p>

<p>1、基于时序的约束建模，即记录用户交互式建模时产生的参数集时序变化，在修正设计时，通过随机选取并更改时序中的参数变化内容，实现参数化设计。这种方法要求模型的构建过程保证良好的层次性；</p>

<p>2、变量几何和变量化设计，即通过构建基于参变量的建模公式进行参数化设计，例如利用简单解析式创建二次曲面。对于复杂模型而言，其构建公式的有效性就成为实现参数化设计的基础；</p>

<p>3、基于规则的变量化设计，前面两种方法在实际应用中很难真正实现，出于实用的考虑，人们首先建立基本规则库，利用人工智能方法进行推理并最终得出约束条件。例如，对于两个实体而言，系统内置了有关实体位置参数的规则，通过推理即可得出实体间的相对位置关系（对于直线段可能就是平行、垂直、共线、相交或其它情况）。实际上，该方法目前仍是参数化设计的研究热点之一；</p>

<p>4、基于特征的参数化设计，从视觉上看，特征指模型在某些观察角度下所呈现出的特殊现象。而在参数化设计中，特征包括了与其相关的实体、参数和关系式，特征是相对于变量或规则的更高级别的语义描述，例如描述物体表面有一处“凹陷”，这就是一种特征。但是，良好的基于特征的设计需要精心设计特征库。</p>

<p><strong>三、参数化设计的应用现状</strong></p>

<p>尽管参数化设计目前已经深入工业设计和制造业，但最令人瞩目的则是其在建筑设计领域中的应用。应注意的是，由于建筑设计本身带有艺术气质和时代特征，引领前端的通常都是著名研究机构或设计公司，而更多的从业人员仅仅是采用稍成熟方法满足需求即可，因此参数化设计在该领域存在着两种截然不同的应用思路。</p>

<p>毫无疑问，最早提出的变量化编程已经为大多数CAD建筑设计师所知了，如AutoLisp。另一方面，参数化设计在这一阶段的主要工作是实现2D和3D的协同设计，具体方法可以是时序法或变量几何。在这期间许多计算机科学家努力向领域专家们推荐各种工具和应用，如William Mitchell于1987年推出的《The Art of Computer Graphics Programming. A structured introduction for Architects and Designers》，书中使用了流行的Pascal语言描述建模脚本。</p>

<p>在许多人看来，上述编程建立三维模型的应用过于抽象，可行性极低。事实亦如此，变量化编程目前已经成为参数化设计领域的非主流技术，而对我们来说更加常见的可能就是诸如ArchiCad或3DStudio Max：直观的交互式界面，以及大量参数输入对话框，该模式至今仍占据绝对优势。后者的缺点是，用户很难针对复杂模型整体进行参数化考虑，除非建模阶段存在非常精妙的参数设计，而这往往是不现实的。一种解决方法是确保层次化建模，例如K. Martini试图采用面向对象程序设计中的层次化类结构模拟建模过程。由此我们可以联想到一系列层次化方法，如集合、树等；另一方面，考虑到层次化建模的可行性尚未得到证明，我们还可以考虑使用图表示参数化设计中实体之间的约束关系。针对这方面的讨论目前仍是非常开放的问题。</p>

<p><strong>四、艺术创作中的参数化设计思想和实践</strong></p>

<p>首先，这里所说的艺术创作实际上包括前文提到的工业设计；另一方面，我们希望能在更多的艺术设计领域引入参数化的元素，其目的在于：1、大部分现有的艺术创作实际上与商业应用相关，原创效率和大规模应用能力将成为关键的风险因素；2、参数化设计为创作前所未有的艺术形式提供了新途径，而并非字面上的对艺术创作施加“约束”的意思。</p>

<p>达芬奇的《维特鲁威人》堪称把建筑学和人体解剖学相结合的传世名著，而这种艺术上的联系同样也反映到现代CAD/CAM技术中。香港中文大学的王昌凌(Charlie C. L. Wang)就在现代服装设计中引入参数化设计技术，并提出了一种新的基于人体特征的参数化设计方法。该方法从人体点云中提取相关特征，并在参数化模型（注意这里的参数化与“参数化设计”的区别）的基础上使用参数化设计创建新的模型。其中人体模型的参数化包含两个主要阶段，首先使用激光扫描仪获取人体点云，根据语义特征提取并重构人体的特征线框；其次，对人体网格曲面的对称信息进行建模，在特征线框上通过曲线插值生成Gregory曲面片。然后利用一种体素算法在G1连续的曲面上添加细节点云；最后再调整网格曲面的对称性。在完成人体模型参数化后，根据用户输入参数采用参数化设计方法把样例模型映射至参数化模型中，同时对样例模型的选用需依据相关策略进行。与普通的数值插值函数相比，该方法具有较低的出错率，能够保证参数化模型的正确性。基于正确的参数化模型，即可在人体上自动导入使用参数化设计方法在样例模型上设计的服装模型。</p>

<p>事实上，关于服装的参数化设计在最近十年已成为CAD的热点之一，并取得了一些研究成果，但仍鲜见规模化应用。而对于参数化设计技术本身而言，能否继续扩展其应用范围、并在此过程中完善自身的方法论，将成为CAD发展的一个未知数。不过，进一步扩展出有效的杀手级应用则是当务之急。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从SIGGRAPH'11看《Rango》]]></title>
    <link href="http://www.hanyi.name/blog/2011/10/22/cong-SIGGRAPH-11-Rango/"/>
    <updated>2011-10-22T02:45:54+08:00</updated>
    <id>http://www.hanyi.name/blog/2011/10/22/cong-SIGGRAPH-11-Rango</id>
    <content type="html"><![CDATA[<p>一年前，我们曾介绍并讨论了展示在siggraph&#8217;10 Talks上、作为Disney&rsquo;s 50th Feature Animation的《Tangled》。在今年8月7日至11日的温哥华siggraph&#8217;11大会上，工业光魔携首部动画长篇《Rango》成为了“Let there be light”（加点儿灯光？）单元当之无愧的主角（尽管去年的Tangled和今年的Cars 2同时均有入选）。</p>

<p>《Rango》中文译名“兰戈”，由执导了前三部加勒比海盗系列的Gore Verbinski担任导演，该片作为工业光魔在Feature Animation（FA）领域的处女之作，使得后者在首次试水FA后即登上了巅峰。影片主要讲述了一只不慎被遗失在西部荒漠中的蜥蜴，历经艰难、最终找回自我的故事。影片无论在情节构思、画面、配乐上的精细程度都堪称前所未有。本文依旧从Siggraph&#8217;11上的三篇文章出发，试图探索堪称计算机图形学史上迄今最先进的工业级CG技术。</p>

<p><strong> 使用面向FX工具制作动画角色和光照特效</strong></p>

<p>在拍摄初期，工作人员在虚拟转台上测试了整个ILM的材质库，其意在测试材质的环境光遮蔽和阴影效果。然而在影片中，除了60名主要角色以外，还需要大约1000个道具。为了简化这部分工作，这里还使用了部分置换贴图以丰富材质信息。同时，再将这些材质用于不同环境的转台程序下，以便迅速发现问题并制作新的Shader；</p>

<p>过去通常使用光板或参考集设置光线，然而《Rango》则例外，这部分影片中引入了新的方法。每一组镜头中的光照设置非常简单，即包括关键光、环境光、反射光三部分，该方法被用于全部的室外光和一些室内光。技术人员使用Digital Matte部门开发的虚拟集渲染器创建环境光和反射光映射，而非直接进行360度捕获。上述映射被用于非静止的、处于快速移动物体中的反射/折射光精确表示。设置灯光时，关键光通过一个受可切变天空顶约束的远程光Shader定义，并通过复制角色的远程关键光，达到较好的交互和阴影效果。同时，用户还可以通过旋转整个装置以达到尽可能广泛的变化，或只旋转关键光以改变复制光，或通过特定的扭曲修改角色局部的复制光。</p>

<p>除个别场景外，影片几乎所有的室外场景都使用了前文所述的格式化远程关键光、环境光和反射光装置。该装置包含两个开关：一是激活阳光反射卡片（模拟光晕效果），另一个用于开启基于距离的阴影模糊。</p>

<p>假设你在一个阳光明媚的室外场所，挥动手臂并在一张白纸上映上阴影效果，你会发现当你升起手臂时，阴影边界的模糊度随之逐级递增，这种边界阴影模糊在物理学中被称为“半影”现象。物理学中已经证明，半影宽度除以障碍物至阴影面的距离值约为常数1/112，它同时也是太阳以弧度为单位角直径值。工作人员实现了基于距离的关键光阴影边界模糊并对其进行严格控制，力求在符合真实世界效果的基础上尽可能满足导演对夸张手法的要求。</p>

<p>简易的关键光/环境光设置方法是设置全局光照参数，并将其作为一组镜头的初始光照。整部影片也可以通过该方法初始化并检测通用关键光的特效和镜头效果。每当TD（Technical Directors）布置新任务时，他们就可以通过添加特定的光照效果以丰富镜头。出于对主角显著区别于背景的绘制需要，工作人员对其进行了逐帧细化和调整。</p>

<p>角色合成方面起初的构想十分简单，然而随后愈加复杂，这种复杂程度甚至超过了真实的角色电影。导演对每一个场景均有特定的灯光、编排和镜头要求，还包括变化的气候、照片级真实感绘制（光畸变，正确的燃烧扭曲，热涟波和相机抖动等）。额外还包括了沙漠、指纹、水、尘土等各种细节效果。为此制作团队特组织了一批强大的计算机开发团队，通过创建自定义通用脚本制作了多个工具辅助影片拍摄。</p>

<p><strong> 动物皮毛的穿透避免和动力学</strong></p>

<p>在《Tango》中需要对多个鸟类角色建立羽毛模型，而这种羽毛模型通常需要手动放置主要的羽毛茎秆曲线，再在不允许插值的条件下实例化整个皮毛几何体。此外，影片对动物角色的要求还包括了日常姿态、呼吸动作、受风、动量、惯性影响的效果等。这里制作团队开发了一种尽可能保持原设计形态的皮毛动力学模拟和自由碰撞技术。</p>

<p>鸟类的羽毛是通过分层有序叠加的，开发人员应允许设计师能够任意设计皮毛的基本外形、层次结构，且不必处心积虑地避免皮毛穿透问题。设计师通过在角色皮肤上放置引导曲线，以构建基本的皮毛外观，同时在其径向上实例化一个矩形几何框，用户可据此设置宽度、扭曲度、与起始点法线相似度等参数。该四边形面片同时还被用于在绘制阶段实现多种纹理效果。</p>

<p>制作团队共使用了两个实例化的皮毛集合，一是目标集，包括了许多皮毛间的相互穿透效果。二是特征皮毛根集，这部分使用狭长的面片实现，由于其更接近法线方向，故存在较少的互穿透。后者用于对某些动物的皮毛进行初始化和带穿透避免的布料模拟。与[Weber and Gornowicz 2009]提出的复杂方法不同，下一步是使用非身体力设置布料模拟的皮毛。每一个布片的基被限制在一个曲面片上，据此检测面片间的相互碰撞。目标集则是通过布料解析器限制下点接点的受力建立。在模拟过程中，布料面片将面向目标集方向生长、然后由碰撞检测部分避免穿透。碰撞避免的方法可以使用基于三角形或是基于边的排斥方法。在第一步完成后，仍需要进一步对角色动作过程中的皮毛穿透现象进行检测， 同时还要保证对原设计形态的维持。</p>

<p><strong> 插值毛发的碰撞精度</strong></p>

<p>毛发的动力学常常是通过引导毛发和成员插值构成的，因此这部分也被称为插值毛发。碰撞精度是毛发模拟技术中最费时的阶段之一，因此通过限制毛发的碰撞精度从而提升动力学性能是非常重要的。在许多情况下，只需要视觉感官上可被接受即可不需增加碰撞精度，遗憾的是，我们的运气往往没有这么好：）</p>

<p>影片中许多动物都穿有衣服，那么即使是一根发丝从衣服布料中伸出来都是不可接受的。然而对整个已生成的毛发集合进行穿透检测和避免也是不现实的：首先，这种技术非常耗时，插值后的毛发往往是引导毛发的成百上千倍；其次，这种方法并不能用于目前的管线设置，因为在模拟阶段插值头发尚不存在；最后，基于物理的碰撞检测方法通常是使用多边形面片，而非Catmull-Clark细分曲面表示，即使是极小的曲面差异也很难保证碰撞检测的正确性。</p>

<p>这里制作团队提出了一个新的穿透修正方法，该方法主要解决的问题包括精度、效率和时间相关性，其主要贡献是对平滑曲面表示进行碰撞检测，沿着毛发生长方向进行连续碰撞检测，并在每一帧进行碰撞检测。该方法最终在影片多处被用到，它既保证了高效率，同时精度也达到了无需进行后期修正的程度。</p>

<p>文中工作人员使用了[Verma et al. 2009]将CC曲面转换为Bezier表示，这种显式曲面允许通过精确交叉查询解决碰撞检测的问题。其次，使用层次数据结构对毛发和Bezier面片进行候选碰撞检测。由于当前配对可能发生了穿透，将毛发的生长方向再移动至其参数空间中的上层部分。通过沿参数化的曲线空间搜索连续毛发-曲面交叉，其中使用Newton法计算毛发和曲面交叉部分。</p>

<p>在穿透避免时很容易造成无法保持原始形态的问题，这里使用了一种简便方法以保持形态，即在穿透避免后使用[Goldenthal et al. 2007]提出的快速投影法修正其差异长度，然后在碰撞精度和应用不可延展间进行迭代，直到满足两方面需求即停止。实际应用中只需要很少的迭代次数即可完成计算。</p>

<p>插值头发绘制时逐步生成的，同时还要同步进行穿透避免计算。因此需要在每一帧进行独立的穿透避免计算（并行处理），这条限制有一定隐患，即可能导致发生时间无干性：毛发可能在连续帧中发生不平滑。这里通过尽量使其朝向生长方向以降低不平滑的程度，尽管尚不完美，但已经足够达到目的了。</p>

<p><strong> 总结</strong></p>

<p>《Rango》无疑是siggraph&#8217;11大会上一颗耀眼的明珠。与去年的《Tangled》相比，该片的制作成本要少一亿三千万美元（估计成本一亿三千五百万），前者更是花费了Disney Animation Studio长达六年时间。不过，这次ILM的口碑和舆评显然超过了Disney，正如片尾Rango骑着白鸡，发表了如下慷慨激昂的讲话：</p>

<p>My fellow comrades.</p>

<p>There will be times when you doubt yourself.</p>

<p>When you feel pummeled by the cataclysms of life,</p>

<p>Remember this moment. Remember me.</p>

<p>Know that I will be there watching you,</p>

<p>Sometimes at inappropriate moments.</p>

<p>That&rsquo;s part of the deal.</p>

<p>And remember, within all of us resides</p>

<p>The true spirit of the&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GL终究还是来了]]></title>
    <link href="http://www.hanyi.name/blog/2011/05/28/GL-zhong-jiu-hai-shi-lai-le/"/>
    <updated>2011-05-28T10:18:36+08:00</updated>
    <id>http://www.hanyi.name/blog/2011/05/28/GL-zhong-jiu-hai-shi-lai-le</id>
    <content type="html"><![CDATA[<p>本文算是最近三周内的第三个“来了”系列（博主是不是整天无所事事？）&hellip;不过这次的确是因为工作需要的原因，GL的主题将会持续一段时间。至于为什么我习惯称之gl，那么请留意gl的发音/gl/，前面再加个open&hellip;总会有人真正体会到她的魅力所在的。不过这也确实不是我第一次尝试学习gl了：一年前我曾冒着烈日学习nehe怎么用gl画会转的三角形&hellip;两天后被迫放假回家，于是又练了个新号，直到前几天又被个文明贼盗了2w多g&hellip;这里似乎离题了！总之现在就算不上是gl新手了吧&hellip;</p>

<p>上述事实再次告诉我们，当你像我这么老的时候，好奇心就不能再是生活的第一目标了，而应优先满足需求&hellip;在满足各种实际需求的过程中，我们永远的好奇心也将逐步得到慰藉。</p>

<p>PS:Kinect for Windows SDK近期连续跳票&hellip;广大Kinect开发者表示情绪灰常稳定，是到了该OpenNI收拾残局的时候了。</p>

<p>PPS:本周读书去&hellip;</p>
]]></content>
  </entry>
  
</feed>
