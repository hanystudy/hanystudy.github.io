<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 天选之作 | Wing of Dream 梦境之翼]]></title>
  <link href="http://www.hanyi.name/blog/categories/tian-xuan-zhi-zuo/atom.xml" rel="self"/>
  <link href="http://www.hanyi.name/"/>
  <updated>2015-02-24T09:13:18+08:00</updated>
  <id>http://www.hanyi.name/</id>
  <author>
    <name><![CDATA[Han Yi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Microservices陷阱：概念篇]]></title>
    <link href="http://www.hanyi.name/blog/2015/02/18/microservices-trap/"/>
    <updated>2015-02-18T20:33:00+08:00</updated>
    <id>http://www.hanyi.name/blog/2015/02/18/microservices-trap</id>
    <content type="html"><![CDATA[<p><em>2011年5月，microservice一词由一次在威尼斯举行的软件架构工作坊中被提出，直到次年的同次会议中被正式命名为microservices（微服务）。</em> <a href="http://martinfowler.com/articles/microservices.html">James Lewis, Martin Folwer</a></p>

<p>通常，微服务被用于描述一种架构风格。在这种风格下，单个应用软件被设计成一系列可独立部署的服务。尽管业界在微服务的具体定义上还有争议，但其基本上代表了自动化部署、智能终端、语言和数据的去中心化等特征。</p>

<h3>1.基本概念</h3>

<p>Martin是这样用一句话描述微服务的：</p>

<p><em>对于每一个小型服务，其拥有独立的进程、轻量化通信机制（通常是http请求）、这些服务围绕着业务上下文构建，并可以实现独立的自动化部署。而这种控制的去中心化允许不同服务可以采用不同的语言和数据库技术实现。</em></p>

<p>微服务的拥趸把与之相反的设计风格称为monolithic，也就是单一系统。在他们看来，凡是不符合微服务特征的架构，都属于单一系统。</p>

<h4>企业web应用中的单一系统和微服务架构</h4>

<p>基本的企业web应用架构包含三层，分别是用户界面层（页面）、数据层、以及服务端应用层。其中服务端应用层负责接收请求，处理领域逻辑，操作数据库，然后选择响应的视图。单一系统风格一般是指服务端应用层的设计，任何修改都需要对整个系统进行重新部署。</p>

<p>单一系统风格的缺点是：1.小的更新需要对整个系统进行重新构建和部署；2.单一系统内的模块化设计通常很难维持，事实上很难做到完全的修改隔离；3.扩展时需要考虑整个系统，而不是其中拥有真正需求的一小部分。</p>

<p>针对单一系统的上述问题，微服务提供了自己的解决方案：应用软件被设计为一系列服务，这些服务允许独立部署和扩展。每个服务需要提供一个稳固的模块边界，允许由不同语言和团队实现。</p>

<h3>2.微服务的基本特征</h3>

<h4>利用服务实现组件化</h4>

<p>在微服务中，组件化是目的，分割服务是方法。这里的组件是指实现替换和更新独立的软件单位。其中，在不同的场景中软件组件的定义可能不同。一种情况是采用库实现组件，这里的库是链接程序代码、并且直接在内存中调用的一种组件化形式。而对微服务而言，由于服务是进程隔离的，通常采用web service或者rpc实现相互通信的组件化。</p>

<p>基于服务的好处在于，1.允许独立部署，对整体变化更轻量，尽管有些改动不可避免地影响到接口层面，从而产生协同变化，但可以通过聚合服务边界和利用服务契约实现优化演进。2.更加明确的发布接口，对于语言层面来说，发布接口可能没有什么太好的办法，通常只能借助文档并且约束用户破坏组件的封装性，导致组件间的紧耦合。</p>

<p>当然服务也有缺点，首先rpc的效率远不及进程内调用，意味着远程api需要是粗粒度的，但使用起来并不方便。如果需要跨组件的职责变更，跨进程边界通常并不容易。再次，服务内的进程完全独立于外界，包括开发和部署，也就意味着应用服务器和数据库也应当是独立并仅为该服务使用的。</p>

<h4>围绕业务能力构建组织</h4>

<p>为了避免康威法则，应转变固有的以功能划分团队的方式，尽可能组建全功能团队。对于大型单一系统应用，几乎都可以围绕业务能力进行模块化，但这通常需要团队按照业务线划分，这里遇到的主要问题是，通常这些团队的组织都基于复杂的上下文。如果单一系统跨越了多个模块边界，那么对团队中的个体成员来说消化成本是非常高的。此外，模块线需要一个强有力的约定去保证实施。而服务组件能够提供更加明确的分割，从而使团队边界更清晰。</p>

<h4>产品而非项目</h4>

<p>绝大多数的应用开发采用项目模型的方式运作，即完成软件并交付给运维团队，然后开发团队解散。而微服务建议摈弃这种项目形式，而是让团队拥有产品的整个生命周期。这种做法的好处是令整个开发团队能够更进一步和用户接触，承担一定的用户支持任务，并理解用户的业务需求。而对于单一系统而言，该做法几乎很难实现。</p>

<h4>智能终端和哑管道</h4>

<p>当构建不同过程间的通信框架时，多数做法是将业务智能整合进通信机制中，例如Enterprise Service Bus，ESB。ESB产品通常包括了消息路由、编排、变换、乃至业务规则的制定等复杂功能。智能终端和哑管道则相反，由于解耦的需求，服务应当拥有其自身的逻辑，采用类似REST的通信协议，而非WS-Choreography，BPEL或其它采用集中式工具编写的复杂协议。两个好的例子分别是Http API（或protobuf）和轻量级消息总线。后者通常的特点也是“哑”的，如RabbitMQ或ZeroMQ，它们仅仅提供一套异步纤程，智能仍掌握在终端服务手中。</p>

<p>当你试图从单一系统转移至微服务时，最大的难点在于解决内部消息机制。而朴素的转移可能会导致不良通信行为，这里可能需要采用粗粒度方法解决细粒度通信的问题。</p>

<h4>去中心化的控制</h4>

<p>控制中心化的一个结果是使单一的系统平台成为标准，这么做的缺点在于，并非每个问题都是钉子，也并不是每个问题都是锤子，更恰当的方法是在具体情况下采用正确的工具。</p>

<p>微服务的理念是条条大路通罗马式的，也就是说强调服务的独立性。实际上，你会发现越来越多的开发人员开始从自己的实现中分离出实用工具，并分享至社区（工具之间可能拥有类似的功能，却存在不同的实现形式）。</p>

<p>然而这种自由并不意味着微服务并不遵守服务契约。恰恰相反，像是Tolerant Reader和Consumer-Driven Contracts这种契约模式经常被用于微服务实现，帮助服务能够独立发展。同时契约能够保证新服务开发的精简性，保证YAGNI原则，提高开发效率。</p>

<h4>去中心化的数据管理</h4>

<p>目前存在许多方法来解决数据管理中心化的问题。在最抽象级，就意味着划分出系统间不同的概念模型。例如，在大型企业级应用中，顾客的销售视图和支持视图之间存在差异，在销售视图中的顾客信息并不会存在于所有支持视图中，而这又会由于不同语义间的细微差别而存在不同或相同情况。</p>

<p>基于上述原因，如果试图把单一系统划分为多个分离的组件，采用领域驱动设计DDD会是一个不错的方法。DDD能够把复杂的领域分解成多个带边界的上下文，并建立其相互之间的映射关系。对于单一系统和微服务来说DDD都很有效，而后者在概念上更加符合DDD增加隔离的思想。</p>

<p>当基于概念模型进行去中心化时，微服务同样要求把数据存储去中心，而单一系统则采用单独的逻辑数据库进行持久化，企业甚至倾向于使用同一个数据库覆盖多种应用（这在很大程度上取决于供应商的许可证业务）。微服务则更加极端，既可以采用同一数据库技术的多个实例，或者采用完全不同的数据库技术实现（Polyglot Persistence，同样可适用于单一系统）。</p>

<p>这里最大的问题是变更管理，因为在许多应用场景中，单一系统采用事务处理的方式保证多个资源间的一致性。而在分布式系统中，事务无疑变得十分困难，这令微服务面临两难的问题：既要保持分割独立，又要保证一致性。而在实际上，微服务的设计思想倾向于强调服务间的弱事务性。这就使得一致性只可能是最终一致性，并采用弥补操作解决相关出现的问题。</p>

<p>这种非一致性管理的问题对多数团队都是一项挑战，但在实际业务中却时有发生。有时具体业务会要求将不一致性保持在一定程度以内，从而快速响应需求，同时拥有一些类似于回退的过程处理错误。一旦修复这些错误的耗费小于保证业务的强一致性，这种权衡就是值得的。</p>

<h4>基础设施自动化</h4>

<p>近年来，基础设施自动化技术取得了巨大的进步，特别是类似AWS这种公有云服务的兴起，降低了构建、部署、以及操作微服务的门槛。</p>

<p>一般来说，采用微服务的团队通常都能熟练应用持续集成CI、甚至持续交付CD技术，拥有丰富的基础设施自动化背景。CI/CD的目标是令构建和部署变得“无趣”，一旦目标达成，任何扩展就变得非常容易实现，而这在单一系统上已经得到了充分验证。对于微服务来说，该项技术与单一系统相比没有太大区别，但两者的操作域存在明显区别。</p>

<h4>高融错设计</h4>

<p>当采用服务作为应用组件以后，该应用就需要被设计成面向服务的高容错系统。而在实际情况中，任何服务都有可能发生错误而中止服务，客户端必须据此给出合理的响应。与单一系统相比，这是一个存在于微服务系统中的额外复杂度。</p>

<p>首先是测试，包括在生产环境中执行自动测试，以及当某些服务或者数据中心出错的意外情况恢复和监控。然而对习惯于单一系统的运维团队来说，这种方式可能是一时难以接受。
微服务特别强调服务的实时监控，无论是架构方面，还是业务方面，这种语义化监控能够提早给出出错警告并同时开发团队。对于单一系统，可以把单个应用视为一个微服务，区别是你需要在不同进程中的服务出错时得到警告。而由于单一系统通常采用库实现组件化，相同进程内的服务出错可能并不会得到明确的警告。</p>

<p>总而言之，微服务要求较为完善的监控和日志系统，同时拥有一个实时的dashboard随时通知开发团队，重要的测量单位有断路器状态、吞吐量、延迟等等。</p>

<h4>演进化设计</h4>

<p>微服务的实践者通常拥有演进化设计背景，他们把服务分解当作未来控制变更的工具之一。控制变更的目的并非是要降低变更频率，而是保证更好、更快地控制变更对软件的影响。
无论何时对现有系统进行组件化分解，你都需要遵守一个分解原则：组件的关键属性之一是独立可替换和升级。这就意味着我们需要寻找一个点，能够通过重写这部分的组件而不会影响其它组件。而实际上，很多团队选择直接将服务碎片化，而非进行长期演进。</p>

<p>在模块化设计中，一个通用的准则是强调可替换性，这样就可以保证接受变更。当你发现你需要重复的修改两个服务时，那就意味着它们应当被合并。</p>

<p>微服务的优势是降低变更发生时的构建和部署时间，缺点是你需要考虑服务变更对消费者带来的影响。一个传统的解决方式是采用服务版本管理策略，但对于微服务来说，应当尽量不要进行版本管理。在许多情况下，我们可以通过设计使得服务尽可能接受不同的消费者请求。</p>

<h3>2. 总结</h3>

<p>上文几乎列出了微服务架构到目前为止被发现的全部优点，这里列出其缺陷或尚未解决的问题：</p>

<h4>组件边界的确定</h4>

<p>由于微服务本质上是采用服务实现系统组件化，那么组件边界就成为衡量微服务设计优劣的重要参考价值。一旦设计完成，任何代码级重构、借口变更、向下兼容、以及测试架构的复杂度都会提升。</p>

<h4>组件的组成</h4>

<p>当组件的组成方式存在瑕疵，剩下来能做的就是把组件内的复杂性转移至组件连接部分。当你关注组件内部时，应当注意组件间的组成方式设计。</p>

<h4>团队技能</h4>

<p>任何新技术都倾向于更适合拥有中高级能力的团队，但并非对其它团队完全无用。即使是采用单一系统，某些团队依然做的一团糟，而微服务表现如何犹未可知。</p>

<p>最后给出Martin对何时向微服务架构迈进的评论：
<em>One reasonable argument we&rsquo;ve heard is that you shouldn&rsquo;t start with a microservices architecture. Instead begin with a monolith, keep it modular, and split it into microservices once the monolith becomes a problem. (Although this advice isn&rsquo;t ideal, since a good in-process interface is usually not a good service interface.)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[喜讯：热烈祝贺本站正式被OOXX！！]]></title>
    <link href="http://www.hanyi.name/blog/2012/10/13/%25e5%2596%259c%25e8%25ae%25af%25ef%25bc%259a%25e7%2583%25ad%25e7%2583%2588%25e7%25a5%259d%25e8%25b4%25ba%25e6%259c%25ac%25e7%25ab%2599%25e6%25ad%25a3%25e5%25bc%258f%25e8%25a2%25abooxx%25ef%25bc%2581%25ef%25bc%2581/"/>
    <updated>2012-10-13T01:05:39+08:00</updated>
    <id>http://www.hanyi.name/blog/2012/10/13/%e5%96%9c%e8%ae%af%ef%bc%9a%e7%83%ad%e7%83%88%e7%a5%9d%e8%b4%ba%e6%9c%ac%e7%ab%99%e6%ad%a3%e5%bc%8f%e8%a2%abooxx%ef%bc%81%ef%bc%81</id>
    <content type="html"><![CDATA[<p>经向有关部门了解，本站已被GFW屏蔽，具体原因不明。大家今后VPN见！百度的朋友就对不住啦&hellip;&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有关秋雨、毕业、软件测试、痛苦根源、《金刚经》和妄念的一切]]></title>
    <link href="http://www.hanyi.name/blog/2012/09/08/%25e6%259c%2589%25e5%2585%25b3%25e7%25a7%258b%25e9%259b%25a8%25e3%2580%2581%25e6%25af%2595%25e4%25b8%259a%25e3%2580%2581%25e8%25bd%25af%25e4%25bb%25b6%25e6%25b5%258b%25e8%25af%2595%25e3%2580%2581%25e7%2597%259b%25e8%258b%25a6%25e6%25a0%25b9%25e6%25ba%2590%25e3%2580%2581%25e3%2580%258a%25e9%2587%2591%25e5%2588%259a%25e7%25bb%258f/"/>
    <updated>2012-09-08T01:43:30+08:00</updated>
    <id>http://www.hanyi.name/blog/2012/09/08/%e6%9c%89%e5%85%b3%e7%a7%8b%e9%9b%a8%e3%80%81%e6%af%95%e4%b8%9a%e3%80%81%e8%bd%af%e4%bb%b6%e6%b5%8b%e8%af%95%e3%80%81%e7%97%9b%e8%8b%a6%e6%a0%b9%e6%ba%90%e3%80%81%e3%80%8a%e9%87%91%e5%88%9a%e7%bb%8f</id>
    <content type="html"><![CDATA[<p><em>须菩提白佛言：“世尊！佛得阿耨多罗三藐三菩提，为无所得耶？”佛言：“如是，如是。须菩提！我于阿耨多罗三藐三菩提乃至无有少法可得，是名阿耨多罗三藐三菩提。”</em></p>

<p style="text-align: right;">——《金刚般若波罗蜜经》，第二十二品 无法可得分</p>


<p>趁着雨天赶上了入夜前的最后一班校车，结果遇到喜闻乐见的大堵车，折腾回家天已全黑。待饭毕，终于不愿去碰什么C++、数据结构与算法的书——最近整天泡在图书馆里读各种经典，恨不能把本科和研究生几年来西大欠我的一座图书馆一下子搬走。结局是书读了不少，却毫无长进：恐怕是因为我这种随众的心态，毕竟眼见人人都揣着本面试宝典之类的畅销书，再淡定也终不能自持了。但这真称得上是所谓的奋斗么？却未必尽然。</p>

<p>现在回头看一眼前一篇文章的日期：写于大约一个半月之前。在那又之前的很长一段时间里，我始终以为未来将在那之后笃定，我甚至认为自己将与心仪的导师和朝气蓬勃的团队会面，大家相谈甚欢，以至于令我觉得能够在自己钟爱的领域大干十年，人生便没有遗憾了。然而当青岛会议结束后，却发现情况和当初预想的完全不同：首先，如果稍了解国内的科研现状，你会发现好的导师和团队真是凤毛菱角，即便遇到了，准入门槛也极高，甚至不完全取决于主观因素，有时真得称得上是可遇而不可求；其次，我发现自己现有的心智模式中可能缺少非常重要的一块，尽管多年来不时遇到好心人提醒，却很少真的思考这个问题。换言之，如果我选择并得以“再干十年”，难道就真能得到自己想要的东西么？</p>

<p>这是一个矛盾，而且以我仅有的经验而言根本无法解决之，也无法获得能够真正说服自己的第三方的帮助。再加上七八月份的火气：令我不得不选择逃离，去到一个能够给自己降温的圣地，也是为了给自己留一点时间：我明智地选择了一人出发，在青藏高原起伏的草场上，试图短暂忘却平均海拔4000米下的一切，而有时候，甚至真的已经感到有些“乐不思蜀”了。有意思的是，等我回到家，发现命运已经把自己落下了一截。</p>

<p>我不知道它是如何发生，实话说也不想知道。大概是因为我有一种固有的计算思维，在提前制定测试用例时，我会像是强迫症似地列举出每条分支和可能性，然后从自己的角度做出对结果的评估。也就是说，我已经意识到这会是结局之一，的确就不很讶异了。但这种所谓的“淡定”存在明显的缺陷，即如果我们只一味做黑盒测试，无法真正从编码的角度去解释问题的原因，那么作为此生唯一的程序员，怎么保证自己能谱下一首生命之歌呢？然而关于这个问题，我至今没有想太明白。</p>

<p>后来有机会和朋友讨论这件事，还是不到两周前的事。谁知道大家听了都很不屑：“这简直太显而易见了吧？”我很惊奇他们是如何熟练掌握这种技能的，更有可能是道听途说吧？但如今世界的规则不就是由道听途说演变而来的么？唯一能确定的，就这是一切都没有超出合理的范围之外，如果连这些都不合理，那人类恐怕早都灭亡了也说不定。</p>

<p>于是我觉得自己又面临着一次需求跟踪与评估，值变了，维度却没变，复杂度依然毫无降低。唯一能做的，就是像众人一样，去啃那些本不值得在此时去啃的书。也就是说，虽然自己的算法bug了，换成朴素的一样好用，当然前提是你不是一个追求完美的狂热份子。我显然在这又悲剧了一把。</p>

<p>所以好不容易回趟家，绵绵秋雨，好时节当然不能全浪费了，便去读大乘经典。本文开头的《金刚经》第二十二分，大意为“须菩提问佛说：世尊，佛所得至高无上、大彻大悟大智慧，也就是什么也没得到吗？佛回答道：正是这样，正是这样！须菩提，我于阿耨多罗三藐三菩提，是无所得，（须菩提）一点法都没得到，只是说我成就了至高无上、大彻大悟大智慧。”另文中的名词可参见关于心经的注，在此就不讨论佛学。南怀瑾亦有关于本品的偈颂：“多年行脚觅归途，入室知为道路愚。检点旧时新衣钵，了无一物可提扶。”或许可当做送给自己的安慰作？仔细想了下，自己恐怕永远也到不了那个境界&hellip;&hellip;</p>

<p>尽管我崇尚绝对自由，甚至可以说如果没有自由，我就不再是我。但是另一方面，如果未来我选择妥协，用自己的自由去换取世界观，我就变成了另外一个我，一个背叛了原始的我的我，到那时，我该怎么看待自己？我只能确定，本文完成后还剩了一摞的书等着我去啃。至少通过这种方法，我就有机会去变成一个不一样的我，然后告诉原始的我：原来我是这样的我！</p>

<p>最后，如果读者您完全看懂了本文，那么也请尽量告诉我，让我能够佩服一下自己 ，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网络里的隐形蝴蝶]]></title>
    <link href="http://www.hanyi.name/blog/2012/07/24/%25e7%25bd%2591%25e7%25bb%259c%25e9%2587%258c%25e7%259a%2584%25e9%259a%2590%25e5%25bd%25a2%25e8%259d%25b4%25e8%259d%25b6/"/>
    <updated>2012-07-24T02:24:10+08:00</updated>
    <id>http://www.hanyi.name/blog/2012/07/24/%e7%bd%91%e7%bb%9c%e9%87%8c%e7%9a%84%e9%9a%90%e5%bd%a2%e8%9d%b4%e8%9d%b6</id>
    <content type="html"><![CDATA[<p>取道天津回家的路上，回想起在研讨班上介绍的近期发表在《Science》上的一篇文章——《<a href="http://www.sciencemag.org/content/337/6090/49.abstract">Network Interventions</a>》，恰好随身u盘里存有该期的full text，为了打发时间，便试读了这篇Review（很少去碰《Science》上的Review，往往感觉高贵但又不知所云）。结合最近、特别是这几天会议期间的经历，觉得有所感触，于是就想写文章，无奈下了动车就找不到一个能接到电源的地方，于是只好回家后将其完善。事实上，南加州大学Thomas W. Valente博士通过这篇Review列举了一些针对社会网络的最新研究成果，并向我们展示了一个看待现实问题的新思路。</p>

<p>原文作者Thomas W. Valente是USC的传播学博士，现任该校预防医学系副教授，由于数学学士的背景，其研究兴趣主要集中于网络分析和基于社会网络与程序评估的社会影响研究。Network Interventions的字面意思是网络介入，指利用社会网络数据加速行为变更或改善组织效率的一种新方法。近年来，研究人员逐渐发现通过分析已有的社会网络数据，并采用合适的方法就能得到一种具体且有效的Network Intervention方案，而一旦应用该方案就有可能引发强烈的正面或负面效应（Interventions并不是本文的重点，但却是原文的核心主题）。应当注意的是，Network Interventions之所以可被看作一门科学，是因为前期已有大量有关社会网络分析的研究，并取得了不乏瞩目的成果，而Network Interventions实际上是建立在前述成果基础上的一系列应用。那么，随着时间的推移，社会网络的规模和复杂度不断更迭，其本质是否已发生了无数次巨变呢？</p>

<p>同一篇文章的原作者著有一本《Social Networks and Health: Models, Methods, and Applications》，别出心裁地将社会网络分析的理论和方法应用于公共卫生和其它社会科学领域，其基本观点是：不同人类分组之间相互交流和传播形成了个体的健康行为。这里的“分组”可以指一个族群，也可以指一个个体。通过对社会网络的数据、特别是近年出现的基于互联网的虚拟社会网络所带来的庞大数据进行网络分析，研究人员发现个体行为和精神状态不同程度地受到了网络中相邻节点的影响，影响力最大的节点被称为“变更代理”。目前已有许多判别网络中“变更代理”的方法，而采用Borgatti提出的最关键节点方法可以找到网络中的局部Key player，即所谓的Leader。通常情况下Leader影响了网络中大部分节点的行为属性，但对于类似存在桥节点（且Leader非该类型节点）的网络，传播效率就很大程度上受到非Leader因素的影响。具体到公共卫生领域，这种影响可能是饮食性超重在节点间的传染，其根源则是Key player对其它节点施加了影响，使节点的固有行为、如饮食习惯等发生变化，从而导致超重节点数量的增加。另一个典型案例就是某种抑郁症的网络传播，这里会另文介绍。进一步，研究人员为了度量个体行为在网络中的传播速度和冲量（动量的变化量），通常采用一种“低阈值变更代理”的方法，即通过分析邻接Key Player数量与所有相邻的节点数，从而得到节点的曝光度，其值实际上就是每个节点的阈值。低阈值携带节点有时也会成为变更代理，但确定这部分则需要获取行为学意义上的先验数据加以支持。</p>

<p>总的来说，社会网络可被看作是一个个体相互间施加行为影响的媒介，如同一只隐形的蝴蝶，有意无意将花粉传播到网络中的各个角落。而随着电子信息工业的发展，互联网上的社会网络逐渐崛起，非常丰富和高质量的社会网络数据直接被用于网络分析，从而为底层的基础理论研究提供数据保障，使这第一手资料变得弥足珍贵。但是，研究人员仍需要进一步明确传统社会网络和所谓SNS的本质区别，由于网络传播的即时性和爆炸性，行为影响传播在广度上会有极大的促进，但也未必完全意味着好消息。毕竟，从植物学的角度来说，错误的花粉被授予柱头，将导致花粉和胚珠的双重浪费，这显然不是进化论给予我们的答案。</p>

<p>即使是在传统社会网络里，这种情况发生的概率也非常之低。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[整站迁移完成]]></title>
    <link href="http://www.hanyi.name/blog/2012/07/07/%25e6%2595%25b4%25e7%25ab%2599%25e8%25bf%2581%25e7%25a7%25bb%25e5%25ae%258c%25e6%2588%2590/"/>
    <updated>2012-07-07T21:20:38+08:00</updated>
    <id>http://www.hanyi.name/blog/2012/07/07/%e6%95%b4%e7%ab%99%e8%bf%81%e7%a7%bb%e5%ae%8c%e6%88%90</id>
    <content type="html"><![CDATA[<p>最近一直在考虑是不是该升级到vps了？毕竟单纯的空间已经远远无法满足现在互联网DIY的需求。然而思考再三，vps需要花更多时间去照顾，恰好在未来一段时间内又不会很轻松，只好先忍一忍。于是决定趁早先拿下新域名hanyi.name。结果问题就来了，国内的空间商要求新绑定域名必须重新备案，否则按规定不予解析。还好我对这一套比较熟悉，屁颠儿跑去XX部网站办备案，结果被告知个人只允许备案1次，机构最多也只允许备案5次。而我前次备案是在08年，当时还是因为他们无故删除了我在06年就提交并审核通过的备案信息，悲剧的是他们这次居然成功保存了4年前的信息！回来找空间商商量，最简单的方法还是换别人的真实信息重新提交。顿时无语，原来早前CN域名开放是纯属坑人呢？进而有了将整站迁移至国外空间的想法。</p>

<p>域名问题很好解决，许多国外知名域名商支持通过支付宝进行国际支付，加上pending共花了一天时间完成。缺点是DNS初解析较慢，平时用的CN域名的解析在国内几乎是实时更新的。另一方面采用了原空间商在国外的主机业务，用电信线路看主机的ping不错，不过迁移后发现明显还是慢了一个级别，目前看来只好通过在今后优化页面内容来改善了。好处是空间容量是以前的三倍，不过现在看来用处似乎不大。</p>

<p>迁移工作还是颇费周折，现在看来wordpress迁移唯一必然的成功办法还是数据库内容链接的全文替换，否则只改几个字段可能会出现无法进入后台的情况。再加上周中实验室网络欠费，用了几天坑爹的“西大国内网”，很难顺利完成整站内容的迁移。于是只好把多余的时间用来进行一些反思：多年以来我做了许多自己感兴趣的工作，尽管无甚成果，但确实也学习了不少东西，总体上始终循着当初所谓“自由学习，自由思想”的理念，也从未遇过大的挫折。然而，出于一些忧虑和回避，自己有意无意忽视了平等交流：所谓平等交流，在我看来就是用自己的想法去换取别人的想法，并且所有人都认同且遵守唯一的道德准则。事实上，我对周围真实环境的了解程度非常低，某种程度上是基于以上原因。这也就导致了自己对身边事物的看法具有很强的不确定性，难以在自身问题上做出有效判断。另一方面也导致自己至今缺乏一些常识&hellip;&hellip;有些事在别人看来是显而易见，自己却不容易想明白。</p>

<p>考虑到有些外链是指向原mp77.cn，本站仍会对继续支持这个域名，并持续至少1年时间。而hanyi.name会是我的永久性域名，今后也不会再向站外自动导出文章。</p>
]]></content>
  </entry>
  
</feed>
