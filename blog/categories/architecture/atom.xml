<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: architecture | Wing of Dream 梦境之翼]]></title>
  <link href="http://www.hanyi.name/blog/categories/architecture/atom.xml" rel="self"/>
  <link href="http://www.hanyi.name/"/>
  <updated>2018-09-26T21:08:18-04:00</updated>
  <id>http://www.hanyi.name/</id>
  <author>
    <name><![CDATA[Han Yi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[软件设计与架构笔记(2)]]></title>
    <link href="http://www.hanyi.name/blog/2018/09/25/software-design-and-architecture-notes-2/"/>
    <updated>2018-09-25T09:46:21-04:00</updated>
    <id>http://www.hanyi.name/blog/2018/09/25/software-design-and-architecture-notes-2</id>
    <content type="html"><![CDATA[<h2>结构化编程(Structured Programming)：计算语言的突破</h2>

<p>上世纪50-60年代，人类的计算能力实现了迅猛发展，各界对计算机的应用也有很高期许，越来越多的领域希望得到强大的计算赋能从而实现飞跃。然而当面临的问题越多、越复杂时，人们在解决问题的道路上发现了一条巨大的鸿沟，即以现有的软件构建理论和方法难以应对这些挑战。机遇与挑战并存，这场<strong>软件危机</strong>(Software Crisis)最终促成了软件工程作为一门独立的学科从计算机科学的襁褓中成长起来。</p>

<p>软件危机这个词最早在1968年的北约组织软件工程会议上被诸多与会者提出[NATO68]，由此引发的技术创新和组织行为思辨至今依然活跃。而更现实的影响是，科学家们首先在编程语言本身找到了突破口——<strong>结构化编程</strong>。</p>

<p>发明于上世纪50年代的ALGOL语言，首次用begin&hellip;end语句引入了<strong>代码块</strong>的概念，通过限定其中变量声明的词法作用域，提高程序的<strong>可读性</strong>，从此引起了围绕代码块的研究。1966年，论文[Bohm66]证明使用三种基本的程序结构就能表达任何可计算函数：顺序执行、条件选择和循环迭代，这为随后针对结构化编程的讨论提供了理论依据。1968年，Dijkstra发表了著名的”GOTO语句有害“的观点，并且肯定了如条件选择、循环等语句的应用，同时称GOTO语句应该在所有“高级语言”（这里指除了机器码之外的语言）中被废除[EWD68]。Dijkstra认为应当尽可能减少静态程序和动态运行进程之间的差距，而GOTO语句造成了大量程序难以被理解，即人很难从混乱的静态代码中认识程序的真正意图。这一废除GOTO语句的言论激起旷日持久的争论，反对者认为GOTO所具有的灵活性能满足持续的系统优化工作，但争论两方基本同意应当对GOTO限制使用。于是，结构化编程开始被广泛接受。</p>

<p>伴随着结构化编程的普及，过程式编程(Procedural programming)也在60年代起被许多流行语言采纳，如COBOL和BASIC。这种编程方法以代码块为基础，允许使用子过程（也称子程或函数）编写程序单元，并且可以被程序随时调用。使得来自不同程序员甚至不同组织的代码变得简单可复用，为随后代码库的流行奠定基础。</p>

<h2>结构化程序设计与分析</h2>

<p>结构化编程实现了编程语言的巨大进步，作为首席布道者，Dijkstra发表了很多关于程序的可理解性以及结构化编程实践的原则性观点[EWD70]，但如何设计结构化程序还需要进一步说明。1971年，在计算机教育领域功勋卓著的Niklaus Wirth详细解释了一种自顶而下逐步求精的程序设计方法，并以数学中经典的八皇后问题（把这个著名问题作为编程案例，原因之一是尚无该问题的已知解析解）为例演示了程序设计从问题分析到实现的过程[NW71]。</p>

<p>简单分析可以得到八皇后问题的直观解法：对于全体候选解的集合A，其中每个解元素x满足条件函数p，即(x ∈ A) ∧ p(x)，则：
<code>
repeat Generate the next element of A and call it x
until p(x) ∨ (no more elements in A);
if p(x) then x = solution
</code>
由排列组合知识可知，集合A的空间可达2<sup>32</sup>，枚举算法效率较低。通过对问题进一步的分析，使用回溯法解决该问题的算法效率较高，即：
<code>
j := l;
repeat trystep j;
if successful then advance else regress
until (j &lt; 1) ∨ (j &gt; n)
</code>
以上述程序分析结果为基础构建程序，按照回溯算法的基本思想，首先依照specification给出初步实现：
<code>
variable board, pointer, safe;
considerfirstcolumn;
repeat trycolumn;
    if safe then
    begin setqueen; considernextcolumn
    end else regress
until lastcoldone ∨ regressoutoffirstcol
</code>
根据现有结构化编程语言的表达能力，对如下指令进一步分解：</p>

<p>trycolumn:
<code>
procedure trycolumn;
repeat advancepointer; testsquare
until safe ∨ lastsquare
</code></p>

<p>regress:
<code>
procedure regress;
begin reconsiderpriorcolumn
    if ¬ regressoutoffirstcol then
    begin removequeen;
        if lastsquare then
        begin reconsiderpriorcolumn;
            if ¬ regressoutoffirstcol then
                removequeen
        end
    end
end
</code>
截至目前，如需对上述程序中的指令做进一步分解，就需要设计额外的数据表示了。通过分析待分解语句，可知需要设计一个记录每位皇后位置的数据表示，例如使用二维数组表达棋盘上的每个方块。这里给出一个优化的数据表示方式：
<code>
integer j (0 ≤ j ≤ 9)
integer array x[1:8] (0 ≤ x[i] ≤ 8)
</code>
其中j表示当前被检查的列序号，一维数组x用于存储上一次被检查方块的坐标，程序的部分指令可以被进一步细化为：
<code>
procedure considerfirstcolumn;
    begin j := 1; x[1] := 0 end
procedure considernextcolumn;
    begin j := j + 1; x[j] := 0 end
procedure reconsidetpriorcolumn; j := j - 1
procedure advancepointer;
    x[j] := x[j] + 1
Boolean procedure lastsquare;
    lastsquare := x[j] = 8
Boolean procedure lastcoldone;
    lastcoldone := j &gt; 8
Boolean procedure regressoutoffirstcol;
    regressoutoffirstcol := j &lt; 1
</code>
接下来考虑剩余指令testsquare、setqueen和removequeen。</p>

<p>指令testsqaure需要验证是否满足问题条件，通过已知的x数组应不难通过计算进行判定，问题是可能导致较高的计算量，同时考虑到testsquare的调用频次较高，这里采用额外数据表示进行优化，设计三个Boolean型数组，其意义如下：
<code>
a[k] = true : no queen is positioned in row k
b[k] = true : no queen is positioned in the /-diagonal k
c[k] = true : no queen is positioned in the \-diagonal k
</code>
那么testsquare就可以用简单的布尔运算表示，其余指令也可以通过上述结构完成：
<code>
procedure testsquare;
    safe := a[x[j]] ∧ b[j+x[j]] ∧ c[j-x[j]]
procedure setqueen;
    a[x[j]] := b[j+x[j]] := x[j-x[j]] := false
procedure removequeen;
    a[x[j]] := b[j+x[j]] := c[j-x[j]] := true
</code>
此时发现上述实现的x[j]调用次数过多，为了进一步优化，把x[j]用变量i表示，从而有：
<code>
procedure testsquare;
    safe := a[i] ∧ b[i+j] ∧ c[i-j]]
procedure setqueen;
    a[i] := b[i+j] := c[i-j] := false
procedure removequeen;
    a[i] := b[i÷j] := c[i-j] := true
procedure considerflrstcolumn ;
    begin j:= 1; i:= 0 end
procedure advancepointer; i := i + l
procedure considernextcolumn
    begin x[j] := i; j:=j+l; i := 0 end
Boolean procedure lastsquare;
    lastsquare := i = 8
</code>
通过inline替换程序中的部分指令，其余采用过程调用，从而最终实现如下程序：
<code>
j := 1; i := 0;
repeat
    repeat i := i + 1 ; testsquare
    until safe ∨ (i = 8);
    if safe then
    begin setqueen; x[j] := i; j := j + 1; i := 0
    end else regress
until (j &gt; 8) ∨ (j &lt; 1);
if i &gt; 8 then PRINT(x) else FAILURE
</code>
前述过程清晰解释了逐步求精这种非常经典的结构化程序的分析和设计过程，从早期分析确定适用算法，然后利用基本的结构化编程元素描述初步程序，对复杂过程进一步分解，同时考虑额外必要的数据表示和程序运行效率优化，最终使用目标编程语言实现程序。这是一种具有普遍适用意义的编程方法论，也呼应了Wirth的那句名言：程序=算法+数据结构。</p>

<h2>结论</h2>

<p>50年前的软件危机所揭露的问题成为今天软件工程研究的基石。GOTO语句的争论直至今天，从历史发展看，更多人选择支持Dijkstra的GOTO有害论，许多90年代以后出现的编程语言并没有在应用层面设计GOTO语句。但是，GOTO争论背后有关编程语言灵活和统一的争辩还远未结束。另一方面，结构化编程促成了一套良好的编程方法论，迄今Wirth的逐步求精方法还被采用于程序设计课程，为计算机教育的普及和广泛应用打下了坚实基础。同时，软件设计所要解决的问题也得以提升到更高的复杂度水平。</p>

<h2>引用</h2>

<p>NATO68, <a href="http://homepages.cs.ncl.ac.uk/brian.randell/NATO/nato1968.PDF">NATO Software Engineering Conference</a></p>

<p>Bohm66, <a href="http://www.cs.unibo.it/~martini/PP/bohm-jac.pdf">Flow Diagrams, Turing Machines and Languages with Only Two Formation Rules</a></p>

<p>EWD68, <a href="https://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF">Go-to statement considered harmful</a></p>

<p>EWD70, <a href="https://pure.tue.nl/ws/files/2408738/252825.pdf">Notes on structured programming</a></p>

<p>NW71, <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.119.8111&amp;rep=rep1&amp;type=pdf">Program Development by Stepwise Refinement</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件设计与架构笔记(1)]]></title>
    <link href="http://www.hanyi.name/blog/2018/09/24/software-design-and-architecture-notes/"/>
    <updated>2018-09-24T11:57:34-04:00</updated>
    <id>http://www.hanyi.name/blog/2018/09/24/software-design-and-architecture-notes</id>
    <content type="html"><![CDATA[<p><strong><em>《软件设计与架构笔记》系列，是笔者对自上世纪60年代末至今在工业界和学术界皆有一定影响的软件设计方法的学习和记录，期望通过历史的时间轴把握相关技术发展的脉络，尝试理解推动了这一领域中概念、方法、原则、模式、实践不断演进的若干基本动机，倚靠巨人的肩膀，但求一条少些人云亦云的实践之路。</em></strong></p>

<p>自诞生之日起，软件设计就同时在工业界和学术界探索和实践着，然而二者的动机和方法大相径庭。例如计算机科学家Edsger W. Dijkstra，一生就致力于对计算的简洁性和精确性的探索，其工作背后蕴含了严谨的数学美学；而工业界则侧重于使用由计算衍生的自动化方法解决传统生产的问题，根本目的是追求经济利益的最大化。有趣的是，二者的偶然交汇就迸发出这一系列文章的主题——软件设计，而软件架构——作为稍晚出现的buzz word，有时也被本文采用以和行业用语保持一致。</p>

<h2>THE Multiprogramming system：早期探索</h2>

<p>1965年，Dijkstra在埃因霍温科技大学领导了一支团队在Electrologica(EL) X8上开发多道程序系统，该系统的主要目标是能够平滑地处理持续的用户程序流，并将其作为服务提供给学校。该系统的设计目标是：1.降低短程序运行的周转时间； 2.更经济地使用外设; 3.结合后备存储器的自动控制和中央处理器的经济使用; 4.验证一种经济可行性，即将EL X8用于运行在不依赖容量和计算能力，仅需要通用计算机灵活性的应用程序。</p>

<p>出于多道程序系统的<strong>复杂性</strong>，实时触发中断的偶然性和不可复现性使系统开发的debug面临挑战。为此，团队决定在系统构建之初就重视对debug能力的设计，从而在具体实现前就能证明系统的逻辑可靠性，并显著降低了实际bug数量。在论文EWD68中，为了提高<strong>可测试性</strong>，设计者采用层级结构划分整个系统，并以不同的职责区分系统层级：</p>

<p>0级，负责把逻辑可用的进程分配给处理器。为了防止任何进程独占处理器，该层实现了一个实时时钟中断功能。</p>

<p>1级，实现“段控制器”，通过中断与上层的顺序进程保持同步，负责从自动后备存储器中记录数据。</p>

<p>2级，实现“消息解释器”，负责在控制键盘的输入时产生中断，并且联接系统对话的操作员和特定的目标进程。</p>

<p>3级，实现与输入流缓冲和输出流解缓冲相关的顺序进程，通过逻辑通信单元实现对具体外设的抽象，并按照资源限制采用同步方法限制外设运行的数量。</p>

<p>4级，实现独立用户程序。</p>

<p>根据上述层级划分，团队制定了需求规格说明书，并依此实现系统。在验证阶段，在添加下一层级前，需要对前一层进行充分测试，例如针对0级中实现的实时中断和处理器分配，首先设计一个完整的测试状态空间，然后依次进行测试。而当对1级的“段控制器”进行测试时，可以在0级时制定的测试状态空间的基础上，通过引入“请求页”操作，实现状态空间的扩展，只需引入少量新的测试就可以满足当前层的测试需求，直至完成整个系统。</p>

<p>Dijkstra认为，虽然在概念和设计阶段花费了较长时间，但是该过程为系统贡献了良好的设计，避免传统非层级实现可能面临的测试状态空间“爆炸”问题，从而对系统质量提供保证。</p>

<p>虽然缺少定量的研究方法，发布于1968年的THE Multiprogramming System可以说是首次定性地证明了<strong>结构</strong>在软件设计中的重要作用，并且以系统的可测试性为例进行了深入阐释。</p>

<h2>结论</h2>

<p>系统的复杂性引出了软件设计问题。Dijkstra把软件开发过程划分成三个阶段：概念、构建和验证，并且由一个基于层级划分的设计案例指出结构因素在软件设计中的重要性。虽然工业界可能面临更多的问题（例如成本、人员、规模、业务复杂程度等），但是概念阶段产出的良好设计，能使验证阶段受益，从而实现整体的系统质量保证（笔者注：某种程度上也起到控制成本的作用），是THE多道程序系统的一项重要结论，也启发后人对软件概念阶段本身和其边际效应的进一步研究。</p>

<p>值得一提的是，按照不同职责划分层级，底层能够对上层隐藏其核心概念和具体实现，例如0级隐藏了处理器操作，1级隐藏了“页存储”机制，2级隐藏了电传打印控制台等。但是“信息隐藏”作为一个基本设计概念被明确提出，则是若干年以后了。</p>

<h2>引用</h2>

<p>[EWD68] EW Dijkstra, <a href="http://www.cs.utexas.edu/users/EWD/ewd01xx/EWD196.PDF">The structure of the &lsquo;THE&rsquo;-multiprogramming system.</a></p>
]]></content>
  </entry>
  
</feed>
