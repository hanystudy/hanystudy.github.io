<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Wing of Dream 梦境之翼]]></title>
  <link href="http://www.hanyi.name/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://www.hanyi.name/"/>
  <updated>2016-11-28T21:36:23+08:00</updated>
  <id>http://www.hanyi.name/</id>
  <author>
    <name><![CDATA[Han Yi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[metaprogramming ruby: core concepts - extensions]]></title>
    <link href="http://www.hanyi.name/blog/2015/11/03/metaprogramming-ruby-core-concepts-extensions/"/>
    <updated>2015-11-03T16:08:28+08:00</updated>
    <id>http://www.hanyi.name/blog/2015/11/03/metaprogramming-ruby-core-concepts-extensions</id>
    <content type="html"><![CDATA[<p>As we already know, ruby provides several ways to extend our classes and objects including but not limit to OO inheritance, Module mix-in, Dynamic Methods, Monkey patching / Refinement, Eval family, Ghost methods, Callable objects, Singleton classes / methods, etc. But there are still some important tips deserve to be mentioned, before we moving forward.</p>

<h3>1. Include vs Extend</h3>

<p>Firstly let’s see an example:</p>

<pre><code class="ruby">module Foo
  def self.foo
    p 'Hello world'
  end

  def say_hi
    p 'Hello world'
  end
end

class Bar
  include Foo
end

Bar.foo #NoMethodError: undefined method `foo' for Bar:Class
Bar.new.say_hi #Hello world
</code></pre>

<p>It seems that module mix-in can only involve instance methods but not others like class methods. But how to do similar thing at class level? You must hear about extend:</p>

<pre><code class="ruby">module Foo
  def foo
    p 'Hello world'
  end
end

class Bar
  extend Foo
end

Bar.foo #Hello world
</code></pre>

<p>Extend is used in object level, so we are sure it can also be used for any class in ruby. But in previous article, we know that class method is actually saved as a singleton method of the original class, also instance method of its singleton class. So that should also happen on include:</p>

<pre><code class="ruby">module Foo
  def foo
    p 'Hello world'
  end
end

class Bar
  class &lt;&lt; self
    include Foo
  end
end

Bar.foo #Hello world
</code></pre>

<p>Thus we can regard extend as a kind of special usage on include through above examples.</p>

<h3>2. Method wrappers</h3>

<p>Method wrapper means wrapping an existing method inside a new method, which is very useful when you want to make extension without changing the source, like code in standard library or other cases.</p>

<p>There are several ways to implement method wrappers in ruby, and they are all in composite form of primitives which’ve already been introduced in previous articles. We’ll go through below.</p>

<h4>Around Alias</h4>

<p>Module#alias_method (also the key word ‘alias’) is used to give another name to ruby methods. It will involve more accessibility if an usual method could have different domain names(e.g. size, length and count). Also more flexibilities if you want, like code below:</p>

<pre><code class="ruby">class Foo
  def say_hi
    p 'Hello'
  end
end

class Foo
  alias_method :say_hello, :say_hi

  def say_hi
    say_hello
    p 'World'
  end
end

foo = Foo.new
foo.say_hi #Hello\nWorld\n
</code></pre>

<p>This is just a kind of wrapper using open class, alias_method, and method redefinition.</p>

<h4>Refinement</h4>

<p>We talked about refinement and suggested using refine instead of monkey patch. Actually refinement is even more powerful than that.</p>

<pre><code class="ruby">class Foo
  def say_hi
    p 'Hello'
  end
end

module FooRefinement
  refine Foo do
    def say_hi
      super
      p 'World'
    end
  end
end

using FooRefinement

Foo.new.say_hi #Hello\nWorld\n
</code></pre>

<p>Only thing you need to notice is that the key word ‘using’ may not work well with your IRB environment, which means you couldn’t get result in mind for some versions of ruby if you run those code in IRB. See more information <a href="https://bugs.ruby-lang.org/issues/9580">here</a>.</p>

<p>The benefit of refinement wrapper is controllable scope of wrapper unlike around alias which affects globally. However, accessibility to original method is also lower than alias way.</p>

<h4>Prepending</h4>

<p>Module#prepend is the simplest way to implement method wrapper without scope configurability like refinement. But much more clear than other two.</p>

<pre><code class="ruby">class Foo
  def say_hi
    p 'Hello'
  end
end

module FooPrepending
  def say_hi
    super
    p 'World'
  end
end

Foo.class_eval do
  prepend FooPrepending
end

Foo.new.say_hi #Hello\nWorld\n
</code></pre>

<h3>3. Class Macros</h3>

<p>Ruby objects have no attributes - May this won’t surprise or confuse you too much. Indeed we’ve hear about instance variables or class variables, but you can not access them directly from outside. That means getter or writer can not be avoided:</p>

<pre><code class="ruby">class Foo
  def bar=(value)
    @bar = value
  end

  def bar
    @bar
  end
end

foo = Foo.new
foo.bar = 'Hello'
foo.bar #Hello
</code></pre>

<p>It’s just not ruby style! Ruby provides series accessors for class definition using metaprogramming api, like attr_accessor, attr_reader and attr_writer, they are quite intuitive to use:</p>

<pre><code class="ruby">class Foo
  attr_accessor :bar
end

foo = Foo.new
foo.bar = 'Hello'
foo.bar #Hello
</code></pre>

<p>attr_* come from Module as private instance methods, thus they all can be used in module or class definitions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[metaprogramming ruby: core concepts - eval family II]]></title>
    <link href="http://www.hanyi.name/blog/2015/09/16/metaprogramming-ruby-core-concepts-eval-family-ii/"/>
    <updated>2015-09-16T09:20:27+08:00</updated>
    <id>http://www.hanyi.name/blog/2015/09/16/metaprogramming-ruby-core-concepts-eval-family-ii</id>
    <content type="html"><![CDATA[<p>In previous article several basic scope controlling tools are introduced, like block, proc, lambda, and method object. All of them should work well when you organize them in your code reasonably. There are more flexible way to mix code and bindings in ruby - eval, which may not be used broadly than others, so that considerable traps about it are still unclear for us.</p>

<h3>3. instance_eval / instance_exec</h3>

<p>BasicObject#instance_eval can be used almost everywhere in ruby, you can use it like this:</p>

<pre><code class="ruby">foo = Object.new
foo.instance_eval { @bar = 'hello' }
foo.instance_variable_get('@bar') #hello
</code></pre>

<p>In the block of instance_eval, the scope changes to the instance foo, thus any operations inner it should bind to the instance, except closure variables.</p>

<p>BasicObject#instance_exec has similar feature to eval one, but with arguments support. This benefit shows as below:</p>

<pre><code class="ruby">class Foo
  def initialize
    @bar = 'hello'
  end
end
output = 'world'
foo = Foo.new
foo.instance_exec(output){|output| output = "#{@bar} #{output}"}
output #world
</code></pre>

<h3>4. class_eval / class_exec</h3>

<p>Module#class_eval works for evaluating a block in the context of an existing class. It seems to be similar to instance_eval which will have scope changes to instance self, but also changes current class (excluding singleton class).</p>

<p>class_eval can be used to open a existing class, without using keyword ‘class’. That means it has no scope changing issue compared with keyword way. Actually it even does not need to know the constant name of the target, while keyword way indeed needs.</p>

<p>Also Module#class_exec plays same role like instance_exec for instance_eval.</p>

<p>Think about the thing what we’ve discussed several weeks ago, in ruby all items are instance of class, including classes no matter internal or customized. Which means instance_eval and class_eval both can work for classes in many cases, but indeed have different self meaning.</p>

<p>You may also notice that there is also Module#module_eval / Module#module_exec methods, but they are just alias for class_eval / class_exec without any other changes.</p>

<h3>5. Kernel#eval</h3>

<p>Unlike instance_eval/class_eval, Kernel#eval only accept a string of ruby code as its argument, run the code and give the result. Even it’s so powerful, using string of code is not a good choice if you have other ways. The most issue for string of code is security.</p>

<p>Suppose you have eval expression in your code, which means others can evaluate any code using such method, including get/set operations. Ruby defines safe levels, which actually limits the evaluation of code from outside. By default, ruby will mark potentially unsafe objects which many come from external sources. And user could config a global variable $SAFE, it’s range from 0 to 3(0 by default) with more strict.</p>

<pre><code class="ruby">$SAFE = 1
eval "p 'hello #{gets()}'"
world #SecurityError: Insecure operation - eval
</code></pre>

<p>By default, eval can accept almost any code from outside. However, it will not be permitted for code from I/O device(tainted object) if $SAFE is none zero. Below gives more details about $SAFE:</p>

<table>
<thead>
<tr>
<th>$SAFE</th>
<th style="text-align:center;"> Constraints</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td style="text-align:center;">No checking of the use of externally supplied (tainted) data is performed. This is Ruby’s default mode.</td>
</tr>
<tr>
<td>>= 1</td>
<td style="text-align:center;">Ruby disallows the use of tainted data by potentially dangerous operations.</td>
</tr>
<tr>
<td>>= 2</td>
<td style="text-align:center;">Ruby prohibits the loading of program files from globally writable locations.</td>
</tr>
<tr>
<td>>= 3</td>
<td style="text-align:center;">All newly created objects are considered tainted.</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[metaprogramming ruby: core concepts - eval family I]]></title>
    <link href="http://www.hanyi.name/blog/2015/09/14/metaprogramming-ruby-core-concepts-eval-family/"/>
    <updated>2015-09-14T23:08:19+08:00</updated>
    <id>http://www.hanyi.name/blog/2015/09/14/metaprogramming-ruby-core-concepts-eval-family</id>
    <content type="html"><![CDATA[<p>In ruby, block is the cornerstone of metaprogramming with a surprisingly powerful scope controlling capability. Based on this definition, much brilliant interfaces are introduced, and help to implement many valuable features, like callable objects, eval and its huge family.</p>

<h3>1. blocks</h3>

<p>Block represents a snippet of code, it permits to be called immediately or lately depends on different cases. But compared with some similar concepts in functional programming languages, like Lisp, block still has more limits, and more readability respectively.</p>

<p>In commonly, block can be used like this:</p>

<pre><code class="ruby">def show_hello
  yield 'hello' if block_given?
end

show_hello { |say| puts say }

show_hello do |say|
  file = File.open('/tmp/output.txt', 'w')
  file.write say
  file.close
end
</code></pre>

<p>&lsquo;yield&rsquo; is a ruby keyword used to call blocks sent to the current method. block_given? is an instance method from Kernel to probe whether there is a block for current method.</p>

<p>One of the most useful aspect of block is closure, it captures bindings where it&rsquo;s defined, and avoid impact of scope changing by connecting to those bindings, like flat scopes, and shared scopes.</p>

<p>Frankly speaking, block is actually not responsible for running code, but only representation (Except yield, which indeed means running code immediately). There are more powerful tools to help enhance block usage.</p>

<h3>2. callable objects</h3>

<p>Block is just like a package of code, and you need to use yield to execute it if you like. However, there are more ways to package code in ruby, including Proc and lambda.</p>

<h4>Proc</h4>

<p>We already know that block is not an object in ruby which is really quite a few, but Proc is basically a block turned object, can be seen as a consistent form of block, and you do not have to use yield to run it immediately, it will be running later as you want (Deferred Evaluation). you can define a Proc like this:</p>

<pre><code class="ruby">inc = Proc.new {|x| x + 1}
inc.call(1) #2
dec = proc {|x| x - 1}
inc.call(2) #1
</code></pre>

<h4>lambda</h4>

<p>Except for Proc, lambda can also be used for transferring blocks, but with simpler and a little different way:</p>

<pre><code class="ruby">inc = lambda {|x| x + 1}
inc.call(1) #2
dec = -&gt;(x) {x - 1}
dec.call(2) #1
</code></pre>

<h4>&amp; operator</h4>

<p>Once you have defined a block for a method, there is a way to convert it to a Proc inner method by using &amp;. For example:</p>

<pre><code class="ruby">def bar
  yield 'ruby'
end

def foo(&amp;operation)
  bar(&amp;operation)
  operation.call('world')
end

foo {|x| puts "hello #{x}"}
# hello ruby
# hello world
</code></pre>

<p>&amp; can be seen like transferring a block into Proc, but you need to remove &amp; if you want to use it as a Proc.</p>

<h4>Comparison between procs and lambdas</h4>

<p>You may notice that lambda is also a Proc, but you can still use Proc#lambda? to see the actual type of the target. Besides there are two important differences: keyword &lsquo;return&rsquo; and arguments checking.</p>

<h5>a. return</h5>

<p>As plain blocks, the program will return out of scope where block defined if return statement is set inner block, so does Proc (which may mean that the return may cause exception when the block is called in nonreturnable scope, like top-level). While for lambda, the return only runs out of block, not even farther.</p>

<h5>b. arity</h5>

<p>Arity means the number of arguments. In real case, lambda has less tolerance than Proc, which means that lambda requires correct number of arity, which is no need for procs.</p>

<h4>Method objects</h4>

<p>All methods are objects of Method. You can use Kernel#method or Kernel#singleton_method to get the object of method, then use Method#call to run the method. Also you may use Method#to_proc and define_method to convert method and proc to each other. Eventhough the method still has scope of it&rsquo;s defined.</p>

<h5>Unbound Methods</h5>

<p>Method object can also be unbound from original scopes by using Method#unbind, or Module#instance_method. Generated UnboundMethod object can not be called directly, but you can still call it after bind it to another scope by using UnboundMethod#bind. The only notice is that UnboundMethod object can only be bound to same class or sub if it&rsquo;s from class, and no such limitation when it&rsquo;s from module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[metaprogramming ruby: core concepts - open classes &amp; refinements]]></title>
    <link href="http://www.hanyi.name/blog/2015/09/08/metaprogramming-ruby-core-concepts-open-classes-and-refinements/"/>
    <updated>2015-09-08T22:40:23+08:00</updated>
    <id>http://www.hanyi.name/blog/2015/09/08/metaprogramming-ruby-core-concepts-open-classes-and-refinements</id>
    <content type="html"><![CDATA[<h3>Opening Classes</h3>

<p>Opening classes brings much flexibility for ruby. It permits you to modify existed classes or modules permanently, without having to implement whole world in case you just need to give a simple patch for current tool. For example:</p>

<pre><code class="ruby">class String
  def to_alphanumeric
    gsub(/[^\w\s]/, '')
  end
end
</code></pre>

<p>to_alphanumeric is new interface to return only alpha and numeric part of a string. However, opening class may not work well, especially it&rsquo;s commonly dangerous to opening a frequently used target which would cause unexpected error in code. Due to this reason someone calls opening classes monkey patch and just leaves far from this feature.</p>

<p>While whatever, monkey patch continues conciseness in ruby, sometimes you are able to save your life gracefully with such powerful tool, except the trap behind it.</p>

<h3>Refinements</h3>

<p>From ruby 2.0, there is a more advanced form of monkey patch which is called refinements. Refinements are providing a way to extend classes only under specific scope, but not including modules. For example:</p>

<pre><code class="ruby">class C
  def foo
    puts "C#foo"
  end
end

module M
  refine C do
    def foo
      puts "C#foo in M"
    end
  end
end
</code></pre>

<p>Module#refine creates an anonymous module that contains the changes or refinements to the class (C in the example). self in the refine block is this anonymous module similar to Module#module_eval.</p>

<h4>Scope</h4>

<p>We use using to activate refinements defined in any places, but you may only activate refinements at top-level, not inside any class, module or method scope. You may activate refinements in a string passed to Kernel#eval that is evaluated at top-level. Refinements are active until the end of the file or the end of the eval string, respectively.</p>

<p>Refinements are lexical in scope. When control is transferred outside the scope the refinement is deactivated. This means that when you require or load a file or call a method that is defined outside the current scope the refinement will be deactivated.</p>

<p>If a method is defined in a scope where a refinement is active the refinement will be active when the method is called.</p>

<p>When defining multiple refinements in the same module, inside a refine block all refinements from the same module are active when a refined method is called.</p>

<p>You may also activate refinements in a class or module definition, in which case the refinements are activated from the point where using is called to the end of the class or module definition.</p>

<h4>Method lookup under refinement</h4>

<p>When looking up a method for an instance of class C Ruby checks:</p>

<h5>1. If refinements are active for C, in the reverse order they were activated:</h5>

<p>  The prepended modules from the refinement for C</p>

<p>  The refinement for C</p>

<p>  The included modules from the refinement for C</p>

<h5>2. The prepended modules of C</h5>

<h5>3. C</h5>

<h5>4. The included modules of C</h5>

<p>If no method was found at any point this repeats with the superclass of C.</p>

<p>Note that methods in a subclass have priority over refinements in a superclass. For example, if the method / is defined in a refinement for Integer 1 / 2 invokes the original Fixnum#/ because Fixnum is a subclass of Integer and is searched before the refinements for the superclass Integer.</p>

<p>If a method foo is defined on Integer in a refinement, 1.foo invokes that method since foo does not exist on Fixnum.</p>

<h4>Super</h4>

<p>When super is invoked method lookup checks:</p>

<h5>The included modules of the current class. Note that the current class may be a refinement.</h5>

<h5>If the current class is a refinement, the method lookup proceeds as in the Method Lookup section above.</h5>

<h5>If the current class has a direct superclass, the method proceeds as in the Method Lookup section above using the superclass.</h5>

<p>Note that super in a method of a refinement invokes the method in the refined class even if there is another refinement which has been activated in the same context.</p>

<h4>Refinements and module inclusion</h4>

<p>Refinements are inherited by module inclusion. That is, using activates all refinements in the ancestors of the specified module. Refinements in a descendant have priority over refinements in an ancestor.</p>

<p>After all, refinement is still an experiment feature in ruby 2.x series, there is a detailed <a href="https://bugs.ruby-lang.org/projects/ruby-trunk/wiki/RefinementsSpec">specification</a> in official website, which should cover most aspect of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[metaprogramming ruby: core concepts - scope &amp; self]]></title>
    <link href="http://www.hanyi.name/blog/2015/09/08/metaprogramming-ruby-core-concepts-scope-and-self/"/>
    <updated>2015-09-08T13:47:47+08:00</updated>
    <id>http://www.hanyi.name/blog/2015/09/08/metaprogramming-ruby-core-concepts-scope-and-self</id>
    <content type="html"><![CDATA[<p>Scope defines the circumstance around any ruby statement, which basically limits your accessibility to resources. But ruby also has implicit and complicate Constants/Methods lookup strategy to make things not so easy at all. This article will clarify the concepts about scope and self firstly, then deep into the Constants/Methods lookup strategy. Finally, let&rsquo;s try to understand top-level which may be the most special case in this topic.</p>

<h3>1. Scope</h3>

<p>In most cases, the &lsquo;Scope&rsquo; we say in ruby commonly refers to variable scope, which has a little bit different from other popular languages. For example, there are four basic variable scopes including local, global, instance and class level, none of them has business with each other. We&rsquo;ve already know the naming specification below:</p>

<table>
<thead>
<tr>
<th style="text-align:center;">Name begins with</th>
<th style="text-align:center;">Variable scope</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">[a-z] or _</td>
<td style="text-align:center;">local variable   </td>
</tr>
<tr>
<td style="text-align:center;">$         </td>
<td style="text-align:center;">global variable  </td>
</tr>
<tr>
<td style="text-align:center;">@         </td>
<td style="text-align:center;">instance variable</td>
</tr>
<tr>
<td style="text-align:center;">@@        </td>
<td style="text-align:center;">class variable   </td>
</tr>
</tbody>
</table>


<p>Actually the tricky is not naming, it&rsquo;s about default scope changing. As we know that ruby has lexical scope, but not like others, it does not support nested scope, like inner scope shares outer scope in some languages. Each of four variable scopes in above figure is purely independent to each other.</p>

<h4>message &amp; scope resolution operator</h4>

<p>Dot . is message operator in ruby, mainly used for message receiving, like method call. Double colon :: is scope resolution operator, commonly used for getting constant in specific scope, Like Foo::Bar, means searching ./foo/bar with relative path. If Foo is undefined in current scope, you should always use ::Foo::Bar to figure it out using absolute path.</p>

<h4>scope changing</h4>

<p>There are four basic cases which may create and change the scope lexically: Class definitions (class), Module definitions (module), Methods (def) and Blocks. Block scope is a little bit different from others and more interesting, which would create its own scope after the block defined, but also have closure capability, like code below:</p>

<pre><code class="ruby">foo = ''
bar = lambda { foo = 'hi' if foo == 'hello' }
foo = 'hello'
bar.call
foo #hi
</code></pre>

<p>For sure we can break this very easily:</p>

<pre><code class="ruby">foo = ''
bar = lambda { |;foo| foo = 'hi' if foo == 'hello' }
foo = 'hello'
bar.call
foo #hello
</code></pre>

<p>Notice that |;foo| defines foo as a local variable in its block, this kind of feature was introduced from ruby 1.9.</p>

<h4>constants scope</h4>

<p>The scope we&rsquo;ve talked until now basically only means variable scope. In ruby, constant is totally different type of data compared with other languages like C++ or Java, any constant name must be started with uppercase character. And none of them can be assigned dynamically. Like:</p>

<pre><code class="ruby">def foo
  Bar = 'hello'
end #should give SyntaxError for dynamic constant assignment
</code></pre>

<p>Constants defined within a class or module can be accessed within its parent. And scope operator we talked before should be used when it&rsquo;s outside the class or module. Constants defined outside any class or module are global scope, can be accessed directly or by using the scope operator &lsquo;::&rsquo; with no prefix.</p>

<h3>2. Self</h3>

<p>As we know that the grail in ruby world would be conciseness. However, such conciseness is built on many bright solutions like keyword self.</p>

<p>if you just type a name in ruby console, it will show you an error:</p>

<pre><code class="ruby">foo #NameError: undefined local variable or method `foo' for main:Object
</code></pre>

<p>Indeed it has a huge gap between ruby and other languages in such case. But the expression with only name as a statement in ruby really means asking for local variable first, if found nothing then go on for searching method defined by current object. Here &lsquo;main&rsquo; is a special object which represents the top-level, will have more discussion in the last part of this article.</p>

<h4>calling methods</h4>

<p>When you want to call a method, there should always be a receiver pointed to target object. Commonly that would be in this form:</p>

<pre><code class="ruby">some_object.some_method
</code></pre>

<p>If some_object is omitted, some_method will be called on the object where the current scope belongs to. self is one of the keywords referring to the current object. Note that private is an exception in this case, we will show an example here which has already been introduced in last several articles talking about private and public.</p>

<pre><code class="ruby">def foo
  'Hello'
end

foo #Hello
self.foo #NoMethodError: private method `foo' called for main:Object
</code></pre>

<p>The most usage of self would be defining a class method, or getting singleton class of current class.</p>

<h3>3. Method lookup</h3>

<p>The order of name lookup should be local variable/constant, then method. We has discussed about variable and constant scope in the first part. Here let&rsquo;s have a look at method lookup.</p>

<p>When a message call happens, ruby will found its receiver firstly which should be an object. Since all methods are stored in classes and modules so method lookup walks these, not the objects themselves.</p>

<p>Here is the order of method lookup for the receiver’s class or module R:</p>

<h4>i. The prepended modules of R in reverse order.</h4>

<h4>ii. For a matching method in R.</h4>

<h4>iii. The included modules of R in reverse order.</h4>

<p>If R is a class with a superclass, this is repeated with R‘s superclass until a method is found. And once a match is found method lookup stops. If no match is found this repeats from the beginning, but looking for method_missing. The default method_missing is BasicObject#method_missing which raises a NameError when invoked.</p>

<h3>4. Understanding top-level</h3>

<p>May be you&rsquo;re not interested in top-level mechanism as a rails developer (You have to use top-level one day even you&rsquo;re only develop rails application), but you need to notice that ruby is also regarded as a powerful scripting language and already as a built-in tool in many popular OS distributions. We talk about top-level because it behaves different from any ruby official documents.</p>

<p>I&rsquo;ve found a nice explanation about top-level <a href="https://banisterfiend.wordpress.com/2010/11/23/what-is-the-ruby-top-level/">here</a>, but there are some newer update in latest ruby, we&rsquo;ll go through this.</p>

<p>Most of us may know that top-level refers to main, which is an object of Object. You can prove it very easily like this:</p>

<pre><code class="ruby">self #main
self.class #Object
</code></pre>

<p>But how about define a top-level method?</p>

<pre><code class="ruby">def foo
  'hello'
end
foo #hello
method(:foo).owner #Object
Object.private_method_defined?(:foo) #true
self.class.private_instance_methods(false) #[:foo]
</code></pre>

<p>Does that look like a class definition? Even for the constant definition:</p>

<pre><code class="ruby">Foo = 'hello'
Object.const_defined?(:Foo, false) #true
</code></pre>

<p>It just looks like you&rsquo;re operating on class Object. Not only for this, we found that there can also use public, private, or include method, they are shadow in singleton_class of main:</p>

<pre><code class="ruby">singleton_class.private_instance_methods(false) #[:public, :private, :include, :using, :define_method]
</code></pre>

<p>Based on our analyst above, we find a strange dual-nature of ruby top-level with some unexpected definitions in main object in purpose. Matz gives a <a href="http://groups.google.com/group/comp.lang.ruby/browse_thread/thread/7bb7b451a8f3cca7/98c4c62127b9d945">explanation</a> about design of top-level. You can also get more discussion <a href="http://stackoverflow.com/questions/1761148/where-are-methods-defined-at-the-ruby-top-level">here</a>. From my view, such unusual design exactly helps conciseness of this language, but also gains our confusion and curiosity.</p>
]]></content>
  </entry>
  
</feed>
