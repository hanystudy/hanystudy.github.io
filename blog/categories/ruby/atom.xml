<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Wing of Dream 梦境之翼]]></title>
  <link href="http://www.hanyi.name/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://www.hanyi.name/"/>
  <updated>2015-08-31T11:54:27+08:00</updated>
  <id>http://www.hanyi.name/</id>
  <author>
    <name><![CDATA[Han Yi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[metaprogramming ruby: core concepts - Object Oriented Hierarchies]]></title>
    <link href="http://www.hanyi.name/blog/2015/08/29/metaprogramming-ruby-core-concepts-object-oriented-hierarchies/"/>
    <updated>2015-08-29T22:40:06+08:00</updated>
    <id>http://www.hanyi.name/blog/2015/08/29/metaprogramming-ruby-core-concepts-object-oriented-hierarchies</id>
    <content type="html"><![CDATA[<p>Since last several articles, we&rsquo;ve gone through all basic but the most important internal definitions in Ruby lang. They are BasicObject, Object, Module, and Kernel, don&rsquo;t forget Class. The five composite the root of Object Oriented Hierarchies in Ruby world. One of their most useful benefit is incredible metaprogramming ability, which already provides people revolutionary tools like Ruby on Rails. Frankly speaking, the word metaprogramming makes itself too mysterious to be accepted by most people. Conciseness and Expressiveness - are the only purpose of this feature.</p>

<h3>1. Class</h3>

<p>Classes in Ruby are first-class objects, each class in Ruby is an instance of class Class. Typically, you create a new class by using: Class.new. When a new class is created, an object of type Class is initialized and assigned to a global constant (Name in this case). When Name.new is called to create a new object, the new method in Class is run by default. Classes, modules, and objects are interrelated, we will discuss more in next chapter.</p>

<h4>Public Class Methods</h4>

<h5>new</h5>

<p>Creates a new anonymous (unnamed) class with the given superclass (or Object if no parameter is given). You can give a class a name by assigning the class object to a constant. If a block is given, it is passed the class object, and the block is evaluated in the context of this class using class_eval.</p>

<h4>Public Instance Methods</h4>

<h5>allocate</h5>

<p>Allocates space for a new object of class&rsquo;s class and does not call initialize on the new instance. The returned object must be an instance of class.</p>

<h5>new</h5>

<p>Calls allocate to create a new object of class&rsquo;s class, then invokes that object&rsquo;s initialize method, passing it args. This is the method that ends up getting called whenever an object is constructed using .new.</p>

<h5>superclass</h5>

<p>Returns the superclass of class, or nil. Returns nil when the given class does not have a parent class.</p>

<h4>Private Instance Methods</h4>

<h5>inherited</h5>

<p>Callback invoked whenever a subclass of the current class is created.</p>

<h3>2. Hierarchy of Five Kings</h3>

<p>For more clearly, here we give a figure to cover all five items listed in preface. (We also list two guests in this figure to represent custom codes in the hierarchy)</p>

<p><img src="http://7xk84n.com1.z0.glb.clouddn.com/metaprogramming_ruby/ruby_oo_hierarchy.png" alt="More advance Ruby OO hierarchy" /></p>

<p>From the figure, we can see that class can be completely separated with objects under well design. Ruby uses this kind of hierarchy to implement its internal Object Oriented design. Here we would like to introduce the responsibilities on metaprogramming for each in above figure, and have deeper discussion on Module and Class, which are directly related to custom codes.</p>

<h4>BasicObject</h4>

<p>BasicObject is the root of all objects in Ruby through its subclass Object. The only class method in BasicObject is &lsquo;new&rsquo;, which is used to allocate memory to new object, and do initialization. For the public instance methods, mainly including object_id, send, and instance_eval/instance_exec to provide basic operations on any objects in Ruby. Also, BasicObject figures out the method_missing mechanism, which is very important for Ruby DSL definition, and singleton methods hook — which actually connects classes and objects in Ruby.</p>

<h4>Object</h4>

<p>If any class is defined by using keyword &lsquo;class&rsquo; without other specific inheritance, it should be inherited from Object by default. Object offers the top useful Constants in Ruby world, like ARGV, ENV, RUBY_VERSION, STDIN/STDOUT/STDERR, etc. Also for public instance methods, it provides objects comparison, clone/dup, freezing, and respond_to? checking, etc.</p>

<p>In metaprogramming field, Object mainly focus on instance level usage, like getting class of object, extend, instance_of?, methods, retrieving singleton_class/singleton_methods of object. etc.</p>

<h4>Kernel</h4>

<p>Kernel is very special in the hierarchy, because it&rsquo;s absolutely not class but an object. On the other hand, Kernel is mixed into class Object, making it become the earliest members in the whole hierarchy and also play very important role in the process.</p>

<p>Unlike Object, Constants in Kernel do not refer to some parameters of internal Ruby lang, they&rsquo;re more like an utility or tool kit for subclasses, especially the reference to popular classes. Kernel also plays hard in Process operations(abort, fork, spawn), Source file loading(auto loading, require), Exception(catch, fail, raise, throw), String(chomp, chop, format, gets, gsub, sprintf, sub), Controlling(loop, sleep, rand, srand, trace/untrace), and IO(open, print, put, readlines, select).</p>

<p>Kernel also enhances the metaprogramming, like binding, block_given?, caller, eval, lambda, and proc.</p>

<h3>3. Modules and Classes</h3>

<h4>Module</h4>

<p>Basically, Modules serve two purposes in Ruby: namespacing and mix-in functionality.</p>

<p>A namespace can be used to organize code by package or functionality that separates common names from interference by other packages. Mix-in functionality allows sharing common methods across multiple classes or modules. Ruby comes with the Enumerable mix-in module which provides many enumeration methods based on the each method and Comparable allows comparison of objects based on the &lt;=> comparison method.</p>

<p>A module is created using the module keyword.</p>

<h4>Class</h4>

<p>Every class is also a module, but unlike modules a class may not be mixed-in to another module (or class). Like a module, a class can be used as a namespace. A class also inherits methods and constants from its superclass. Use the class keyword to create a class. Any method defined on a class is callable from its subclass, the same is true for constants. You can override the functionality of a superclass method by redefining the method. If you wish to invoke the superclass functionality from a method use super.</p>

<p>If you do not supply a superclass your new class will inherit from Object. You may inherit from a different class using &lt; followed by a class name.</p>

<p>When used without any arguments super uses the arguments given to the subclass method. To send no arguments to the superclass method use super(). To send specific arguments to the superclass method provide them manually like super(2). super may be called as many times as you like in the subclass method.</p>

<h4>Common properties</h4>

<p>Note that there are many similarities between modules and classes. Besides the ability to mix-in a module, the description of modules also applies to classes.</p>

<h5>Reopening</h5>

<p>Reopening classes is a very powerful feature of Ruby, but it is best to only reopen classes you own. Otherwise it may lead to naming conflicts or difficult to diagnose bugs.</p>

<h5>Nesting</h5>

<p>Modules may be nested.</p>

<h5>Packaging</h5>

<p>Many packages create a single outermost module (or class) to provide a namespace for their functionality. You may also define inner modules using :: provided the outer modules (or classes) are already defined.</p>

<h5>Self</h5>

<p>self refers to the object that defines the current scope. And it will change when entering a different method or when defining a new module.</p>

<h5>Constants</h5>

<p>Accessible constants are different depending on the module nesting (which syntax was used to define the module). if you use :: to define A::B without nesting it inside A a NameError exception will be raised because the nesting does not include A. If a constant is defined at the top-level you may preceded it with :: to reference it.</p>

<h5>Methods</h5>

<p>Class methods may be called directly(This is slightly confusing, but a method on a module is often called a “class method” instead of a “module method”. See also Module#module_function which can convert an instance method into a class method.). When a class method references a constant it uses the same rules as referencing it outside the method as the scope is the same.
Instance methods defined in a module are only callable when included. These methods have access to the constants defined when they were included through the ancestors list.</p>

<h5>Visibility</h5>

<p>Ruby has three types of visibility. The default is public. A public method may be called from any other object.</p>

<p>The second visibility is protected. When calling a protected method the sender must be a subclass of the receiver or the receiver must be a subclass of the sender. Otherwise a NoMethodError will be raised. Protected visibility is most frequently used to define == and other comparison methods where the author does not wish to expose an object&rsquo;s state to any caller and would like to restrict it only to inherited classes.</p>

<p>The third visibility is private. A private method may not be called with a receiver, not even self. If a private method is called with a receiver a NoMethodError will be raised.</p>

<h5>Alias and Undef</h5>

<p>You may also alias or undefine methods, but these operations are not restricted to modules or classes.</p>

<h3>4. Singleton classes</h3>

<p>The singleton class (also known as the metaclass or eigenclass) of an object is a class that holds methods for only that instance. You can access the singleton class of an object using class &lt;&lt; object like this:</p>

<pre><code class="ruby">class Foo
  class &lt;&lt; self
    # self is the singleton class here
  end
end

class &lt;&lt; Foo
  # self is the singleton class here
end
</code></pre>

<p>This allows definition of methods and attributes on a class (or module) without needing to write def self.my_method.</p>

<p>Since you can open the singleton class of any object this means that this code block:</p>

<pre><code class="ruby">bar = Object.new

def bar.bar_method
  1 + 1
end
</code></pre>

<p>is equivalent to this code block:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bar</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class &amp;lt;&amp;lt; bar</span>
</span><span class='line'><span class="sr">  def bar_method</span>
</span><span class='line'><span class="sr">    1 + 1</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Understanding singleton class in ruby is very important to investigate internal ruby, especially for its OO design. In next article, we&rsquo;ll introduce the scope mechanism in ruby.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[metaprogramming ruby: core concepts - Kernel]]></title>
    <link href="http://www.hanyi.name/blog/2015/08/29/metaprogramming-ruby-core-concepts-kernel/"/>
    <updated>2015-08-29T21:57:31+08:00</updated>
    <id>http://www.hanyi.name/blog/2015/08/29/metaprogramming-ruby-core-concepts-kernel</id>
    <content type="html"><![CDATA[<p>The Kernel is the object of Module, thus it has all instance methods from the parent. Also it&rsquo;s available as instance methods in every Ruby object since the Kernel is included by class Object. Kernel has widespread usage including but not limit to internal Constant references, Processes operations, Loading Strategies, Exceptions, Controlling, IO, and Basic string operations. This article will focus on metaprogramming on instance level.</p>

<h3>Kernel</h3>

<p>All Constants and instance methods are public in Kernel, thus they all can be used in any objects as callee.</p>

<h5>binding</h5>

<p>Returns a Binding object, describing the variable and method bindings at the point of call. This object can be used when calling eval to execute the evaluated command in this environment.</p>

<h5>eval</h5>

<p>Evaluates the Ruby expression(s) in string. If the binding is given, which must be a Binding object, the evaluation is performed in its context. If the optional filename and lineno parameters are present, they will be used when reporting syntax errors.</p>

<h5>block_given? / iterator?</h5>

<p>Returns true if yield would execute a block in the current context. The iterator? form is mildly deprecated.</p>

<h5>callcc{|cont| block}</h5>

<p>Generates a Continuation object, which it passes to the associated block. You need to require &lsquo;continuation&rsquo; before using this method. Performing a cont.call will cause the callcc to return (as will falling through the end of the block). The value returned by the callcc is the value of the block, or the value passed to cont.call.
In general, Continuation object is used to be analogous to C setjmp/longjmp, or a thread. cont will return itself, and cont.call will jump to end of callcc block.</p>

<h5>caller</h5>

<p>Returns the current execution stack—an array containing strings in the form file:line or file:line: in &lsquo;method&rsquo;. Returns nil if start is greater than the size of current execution stack. Optionally you can pass a range, which will return an array containing the entries within the specified range.</p>

<h5>caller_locations</h5>

<p>Returns the current execution stack—an array containing backtrace location objects. Returns nil if start is greater than the size of current execution stack. Optionally you can pass a range, which will return an array containing the entries within the specified range.</p>

<h5>eval</h5>

<p>Evaluates the Ruby expression(s) in string. If binding is given, which must be a Binding object, the evaluation is performed in its context. If the optional filename and lineno parameters are present, they will be used when reporting syntax errors.</p>

<h5>global_variables</h5>

<p>Lookup global variables.</p>

<h5>lambda</h5>

<p>Equivalent to Proc.new, except the resulting Proc objects check the number of parameters passed when called.</p>

<h5>proc</h5>

<p>Equivalent to Proc.new</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[metaprogramming ruby: core concepts - Module]]></title>
    <link href="http://www.hanyi.name/blog/2015/08/26/metaprogramming-ruby-core-concepts-module/"/>
    <updated>2015-08-26T23:18:08+08:00</updated>
    <id>http://www.hanyi.name/blog/2015/08/26/metaprogramming-ruby-core-concepts-module</id>
    <content type="html"><![CDATA[<p>For internal ruby, Module is mainly used for holding class methods for descendants. Suppose each object has class of A, A always has class of Class, and Class inherits from Module, thus class A should hold all class methods from instance methods in Module. On the other hand, user can mix in self defined Module to provide more instance methods for their class, or use module function directly.</p>

<h3>Module</h3>

<p>Module provides two kinds of class level metaprogramming methods, either public or private. Each of them has different usage for building descendants.</p>

<h4>Public instance methods</h4>

<h5>ancestors</h5>

<p>Returns a list of modules included/prepended in current module.</p>

<h5>class_eval</h5>

<p>Evaluates the string or block in the context of module, except that when a block is given, constant/class variable lookup is not affected. This can be used to add methods to a class. class_eval returns the result of evaluating its argument.</p>

<h5>class_exec</h5>

<p>Evaluates the given block in the context of the class/module. The method defined in the block will belong to the receiver. Any arguments passed to the method will be passed to the block. This can be used if the block needs to access instance variables.</p>

<h5>class_variable_defined?</h5>

<p>Returns true if the given class variable is defined in object.</p>

<h5>class_variable_get</h5>

<p>Returns the value of the given class variable (or throws a NameError exception). The @@ part of the variable name should be included for regular class variables.</p>

<h5>class_variable_set</h5>

<p>Sets the class variable named by symbol to the given object.</p>

<h5>class_variables</h5>

<p>Returns an array of the names of class variables in current module. This includes the names of class variables in any included modules, unless the inherit parameter is set to false.</p>

<h5>const_defined?</h5>

<p>Says whether module or its ancestors have a constant with the given name: If module is a Module, additionally Object and its ancestors are checked. In each of the checked classes or modules, if the constant is not present but there is an autoload for it, true is returned directly without autoloading. If the constant is not found the callback const_missing is not called and the method returns false. If inherit is false, the lookup only checks the constants in the receiver. In this case, the same logic for autoloading applies. If the argument is not a valid constant name a NameError is raised with the message “wrong constant name name”.</p>

<h5>const_get</h5>

<p>Checks for a constant with the given name in module. If inherit is set, the lookup will also search the ancestors (and Object if module is a Module). The value of the constant is returned if a definition is found, otherwise a NameError is raised. This method will recursively look up constant names if a namespaced class name is provided.</p>

<h5>const_missing</h5>

<p>Invoked when a reference is made to an undefined constant in module. It is passed a symbol for the undefined constant, and returns a value to be used for that constant. If found, it returns the loaded class. It therefore implements an autoload feature similar to Kernel#autoload and #autoload.</p>

<h5>const_set</h5>

<p>Sets the named constant to the given object, returning that object. Creates a new constant if no constant with the given name previously existed. If symbol or string is not a valid constant name a NameError will be raised with a warning “wrong constant name”.</p>

<h5>constants</h5>

<p>Returns an array of the names of the constants accessible in module. This includes the names of constants in any included modules, unless the inherit parameter is set to false.</p>

<h5>instance_method</h5>

<p>Returns an UnboundMethod representing the given instance method in module.</p>

<h5>instance_methods</h5>

<p>Returns an array containing the names of the public and protected instance methods in the receiver. For a module, these are the public and protected methods; for a class, they are the instance (not singleton) methods.</p>

<h5>method_defined?</h5>

<p>Returns true if the named method is defined by module (or its included modules and, if module is a class, its ancestors). Public and protected methods are matched. String arguments are converted to symbols.</p>

<h5>module_eval</h5>

<p>Evaluates the string or block in the context of module, except that when a block is given, constant/class variable lookup is not affected. This can be used to add methods to a class. module_eval returns the result of evaluating its argument.</p>

<h5>module_exec</h5>

<p>Evaluates the given block in the context of the class/module. The method defined in the block will belong to the receiver. Any arguments passed to the method will be passed to the block. This can be used if the block needs to access instance variables.</p>

<h5>name</h5>

<p>Returns the name of the module module. Returns nil for anonymous modules.</p>

<h5>prepend</h5>

<p>Invokes Module.prepend_features on each parameter in reverse order.</p>

<h5>private_class_method</h5>

<p>Makes existing class methods private. Often used to hide the default constructor new.</p>

<h5>private_constant</h5>

<p>Makes a list of existing constants private.</p>

<h5>private_instance_methods</h5>

<p>Returns a list of the private instance methods defined in module. If the optional parameter is false, the methods of any ancestors are not included.</p>

<h5>private_method_defined?</h5>

<p>Returns true if the named private method is defined by _mod_ (or its included modules and, if module is a class, its ancestors).</p>

<h5>protected_instance_methods</h5>

<p>Returns a list of the protected instance methods defined in module. If the optional parameter is false, the methods of any ancestors are not included.</p>

<h5>protected_method_defined?</h5>

<p>Returns true if the named protected method is defined by module (or its included modules and, if module is a class, its ancestors).</p>

<h5>public_class_method</h5>

<p>Makes a list of existing class methods public.</p>

<h5>public_constant</h5>

<p>Makes a list of existing constants public.</p>

<h5>public_instance_method</h5>

<p>Similar to instance_method, searches public method only.</p>

<h5>public_instance_methods</h5>

<p>Returns a list of the public instance methods defined in module. If the optional parameter is false, the methods of any ancestors are not included.</p>

<h5>public_method_defined?</h5>

<p>Returns true if the named public method is defined by module (or its included modules and, if module is a class, its ancestors).</p>

<h5>remove_class_variable</h5>

<p>Removes the definition of the symbol, returning that constant&rsquo;s value.</p>

<h5>singleton_class?</h5>

<p>Returns true if module is a singleton class or false if it is an ordinary class or module.</p>

<h4>Private instance methods</h4>

<p>Private instance methods in Module are mainly used in internal classes level.</p>

<h5>alias_method</h5>

<p>Makes new_name a new copy of the method old_name. This can be used to retain access to methods that are overridden.</p>

<h5>append_features</h5>

<p>When this module is included in another, Ruby calls append_features in this module, passing it the receiving module in module. Ruby&rsquo;s default implementation is to add the constants, methods, and module variables of this module to module if this module has not already been added to module or one of its ancestors.</p>

<h5>define_method</h5>

<p>Defines an instance method in the receiver. The method parameter can be a Proc, a Method or an UnboundMethod object. If a block is specified, it is used as the method body. This block is evaluated using instance_eval, a point that is tricky to demonstrate because define_method is private.</p>

<h5>extend_object</h5>

<p>Extends the specified object by adding this module&rsquo;s constants and methods (which are added as singleton methods). This is the callback method used by Object#extend.</p>

<h5>extended</h5>

<p>The equivalent of included, but for extended modules.</p>

<h5>included</h5>

<p>Callback invoked whenever the receiver is included in another module or class. This should be used in preference to Module.append_features if your code wants to perform some action when a module is included in another.</p>

<h5>method_added</h5>

<p>Invoked as a callback whenever an instance method is added to the receiver.</p>

<h5>method_removed</h5>

<p>Invoked as a callback whenever an instance method is removed from the receiver.</p>

<h5>method_undefined</h5>

<p>Invoked as a callback whenever an instance method undefined but called from the receiver.</p>

<h5>module_function</h5>

<p>Creates module functions for the named methods. These functions may be called with the module as a receiver, and also become available as instance methods to classes that mix in the module. Module functions are copies of the original, and so may be changed independently. The instance-method versions are made private. If used with no arguments, subsequently defined methods become module functions. String arguments are converted to symbols.
prepend_features When this module is prepended in another, Ruby calls prepend_features in this module, passing it the receiving module in module. Ruby&rsquo;s default implementation is to overlay the constants, methods, and module variables of this module to mod if this module has not already been added to mod or one of its ancestors. See also Module#prepend.</p>

<h5>prepended</h5>

<p>The equivalent of included, but for prepended modules.</p>

<h5>refine</h5>

<p>Refine klass in the receiver. Returns an overlaid module.</p>

<h5>remove_const</h5>

<p>Removes the definition of the given constant, returning that constant&rsquo;s previous value. If that constant referred to a module, this will not change that module&rsquo;s name and can lead to confusion.
remove_method Removes the method identified by symbol from the current class. For an example, see Module.undef_method.</p>

<h5>undef_method</h5>

<p>Prevents the current class from responding to calls to the named method. Contrast this with remove_method, which deletes the method from the particular class; Ruby will still search superclasses and mixed-in modules for a possible receiver. String arguments are converted to symbols.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[metaprogramming ruby: core concepts - Object]]></title>
    <link href="http://www.hanyi.name/blog/2015/08/21/metaprogramming-ruby-core-concepts-object/"/>
    <updated>2015-08-21T11:24:33+08:00</updated>
    <id>http://www.hanyi.name/blog/2015/08/21/metaprogramming-ruby-core-concepts-object</id>
    <content type="html"><![CDATA[<p>As the default root of all Rubric objects, Object holds quite a lot valuable instance methods for common usage. It mixes in the Kernel module to provide global accessibility of Kernel APIs for all inherited classes. This article will introduce Object definition.</p>

<h3>Object</h3>

<p>Object only holds a few constants and instance methods for objects of descendants, all these methods are only used for instance level metaprogramming.</p>

<h5>class</h5>

<p>Gets class Constant of object.</p>

<h5>define_singleton_method / new_method</h5>

<p>Defines a singleton method in the receiver. The parameters can be a Proc, a Method or an UnboundMethod object. If a block is specified, it is used as the method body.</p>

<h5>extend</h5>

<p>Enhance object with instance methods from modules given as a parameter.</p>

<h5>instance_of?</h5>

<p>Check if obj is an instance of the given class(Except ancestors).</p>

<h5>instance_variable_defined?</h5>

<p>Check if the given instance variable is defined in obj.</p>

<h5>instance_variable_get</h5>

<p>Gets the value of the given instance variable, or nil if the instance variable is not set. Just note that the @ part of the variable name should be included for regular instance variables.</p>

<h5>instance_variable_set</h5>

<p>Sets the instance variable named by symbol to the given object. The variable does not have to exist prior to this call.</p>

<h5>instance_variables</h5>

<p>Returns array of instance variables</p>

<h5>is_a? / kind_of?</h5>

<p>Returns true if class is the class of object, or if class is one of the superclasses of obj or modules included in obj.</p>

<h5>itself</h5>

<p>returns object itself</p>

<h5>method</h5>

<p>Looks up the named method as a receiver in object, returning a Method object. The Method object acts as a closure in object&rsquo;s object instance, so instance variables and the value of self remain available.</p>

<h5>methods</h5>

<p>Returns a list of the names of public and protected methods of object. This will include all the methods accessible in obj&rsquo;s ancestors. If the optional parameter is false, it returns an array of object&rsquo;s public and protected singleton methods, the array will not include methods in modules included in object.</p>

<h5>private_methods</h5>

<p>Returns the list of private methods accessible to object.</p>

<h5>protected_methods</h5>

<p>Returns the list of protected methods accessible to object.</p>

<h5>public_method</h5>

<p>Similar to method, searches public method only.</p>

<h5>public_methods</h5>

<p>Returns the list of public methods accessible to obj.</p>

<h5>public_send</h5>

<p>Invokes the method identified by symbol, passing it any arguments specified. Unlike send, #public_send calls public methods only.</p>

<h5>remove_instance_variable</h5>

<p>Removes the named instance variable from object, returning that variable&rsquo;s value.</p>

<h5>respond_to_missing?</h5>

<p>Hook method to return whether the object can respond to id method or not.</p>

<h5>send / __send__</h5>

<p>Invokes the method identified by symbol, passing it any arguments specified. You can use __send__ if the name send clashes with an existing method in obj.</p>

<h5>singleton_class</h5>

<p>Returns the singleton class of object. This method creates a new singleton class if obj does not have one. If object is nil, true, or false, it returns NilClass, TrueClass, or FalseClass, respectively. If object is a Fixnum or a Symbol, it raises a TypeError.</p>

<h5>singleton_method</h5>

<p>Similar to #method, searches singleton method only.</p>

<h5>singleton_methods</h5>

<p>Returns an array of the names of singleton methods for object. Only public and protected singleton methods are returned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[metaprogramming ruby: core concepts - BasicObject]]></title>
    <link href="http://www.hanyi.name/blog/2015/08/03/metaprogramming-ruby-core-concepts/"/>
    <updated>2015-08-03T07:33:27+08:00</updated>
    <id>http://www.hanyi.name/blog/2015/08/03/metaprogramming-ruby-core-concepts</id>
    <content type="html"><![CDATA[<p>Metaprogramming is one of core features for ruby lang, it&rsquo;s widely used from internal ruby to standard library, also endless magic gems. In next a few articles we will focus on those core stuff. I recommend for <a href="https://pragprog.com/book/ppmetr2/metaprogramming-ruby-2">Metaprogramming ruby 2</a> as a reference, except a little verbose and may be only for primer usage. For more ascent knowledge, perhaps you need to track the <a href="https://github.com/ruby/ruby">trunk</a> of ruby. This essay will concentrate on BasicObject, which is parent for all classes in ruby.</p>

<h3>BasicObject</h3>

<p>As the object oriented hierarchy in ruby core, each type of class is also object of Class except BasicObject, and All the objects of Class has root superclass BasicObject, the one is also object of Class. Thus we&rsquo;ll have whole picture below.</p>

<p><img src="http://7xk84n.com1.z0.glb.clouddn.com/metaprogramming_ruby/ruby_class.png" alt="Ruby OO hierarchy" /></p>

<h4>i.class methods</h4>

<p>BasicObject only has single public class method, names &ldquo;new&rdquo;.</p>

<h4>ii.instance methods</h4>

<p>logical operators, any instance of BasicObject is almost empty, with only a few methods, like logical operators !, !=, ==. Here == has same meaning with equal? for object level equality, The difference is that == is recommended for descendant overriding, but equal? should always be same as it is defined in BasicObject.</p>

<h5>__id__ / object_id</h5>

<p>An integer identifier of an object, should be unique for a given object. But some objects of builtin classes are reused for optimization, like immediate values (not passed by reference but value, like nil, true, false, Fixnums, Symbols, and some Floats) and frozen string literals.</p>

<h5>__send__ / send</h5>

<p>Double underscore gives a backup for pure alphabet version which may be overrode through other ways. Invokes the method, and passes all arguments using dynamic number of arguments.</p>

<h5>instance_eval / instance_exec</h5>

<p>instance_eval support passing a string of ruby source code, with file path and line number when compilation errors happen, also given block, within the context of receiver. Thus eval code will have access to instance variables and private methods.</p>

<p>instance_exec only support using block as an argument, but allows one more argument to be passed from outer scope into receiver.</p>

<h4>iii.private instance methods</h4>

<h5>method_missing</h5>

<p>In BasicObject, method_missing belongs to private instance methods, any call for this method will raise an error. But descendant can override this method to do dynamic processing, according to user&rsquo;s input like symbol name and arguments. If overrode method does not want to do any processing, super should be called to pass message bottom from up.</p>

<h5>singleton_method_added / singleton_method_removed / singleton_method_undefined</h5>

<p>Callback for singleton method operations. As we already know, ruby will not create the whole clone of the class for any objects. Only with a middle layer between object and class - singleton class. Singleton class is generated when object comes out, and any messages sent to object should be transferred to its singleton class first, then its own class if not matches in singleton class.</p>

<p>class&rsquo;s singleton class is different to object&rsquo;s singleton class. That&rsquo;s because singleton class of a class should be inherited from its parent&rsquo;s singleton class, until BasicObject&rsquo;s singleton class, then it can reach non singleton class. But for object, singleton class should always have parent class of its own class.</p>
]]></content>
  </entry>
  
</feed>
