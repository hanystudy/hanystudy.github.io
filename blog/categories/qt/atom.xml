<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: qt | Wing of Dream 梦境之翼]]></title>
  <link href="http://www.hanyi.name/blog/categories/qt/atom.xml" rel="self"/>
  <link href="http://www.hanyi.name/"/>
  <updated>2019-06-01T23:33:07-04:00</updated>
  <id>http://www.hanyi.name/</id>
  <author>
    <name><![CDATA[Han Yi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Qt与现有系统字符集的兼容问题研究]]></title>
    <link href="http://www.hanyi.name/blog/2011/02/18/Qt-yu-xian-you-xi-tong-zi-fu-ji-de-jian-rong-wen-ti-yan-jiu/"/>
    <updated>2011-02-18T19:04:07+08:00</updated>
    <id>http://www.hanyi.name/blog/2011/02/18/Qt-yu-xian-you-xi-tong-zi-fu-ji-de-jian-rong-wen-ti-yan-jiu</id>
    <content type="html"><![CDATA[<p>本文是假期完成的最后一篇文章，之后我将回到学校，届时更新频率将恢复为每周0-2篇左右。</p>

<p>众所周知，Qt在国际化方面的实现是非常方便的。但有时我们会面临一些问题，如在Windows系统中GB2312/GBK和unicode字符集的不兼容，以及在与现有网络程序实现通信的过程中发生的字符集不兼容问题。当然，此类问题可能比较罕见，而且事实上不只Qt面临这一棘手的情况。经过查阅一些资料并进行实践开发，我们相信Qt提供了目前最为便捷的字符集兼容解决方案。我们的最终应用是实现与Unix/Windows主机上的现有服务端程序进行通信，以实现如http、ftp等低级别应用层协议。</p>

<p>首先介绍GB2312-80、BIG-5、Unicode、GBK以及GB18030。</p>

<p><strong>====================以下内容来自wikipedia====================</strong></p>

<p><strong>
</strong></p>

<p><strong>GB2312-80</strong>是中国国家标准简体中文字符集，全称《信息交换用汉字编码字符集-基本集》，又称GB0，由中国国家标准总局发布，1981年5月1日实施。GB2312中对所收汉字进行了“分区”处理，每区含有94个汉字／符号。这种表示方式也称为区位码。其中：01-09区为特殊符号；16-55区为一级汉字，按拼音排序；56-87区为二级汉字，按部首／笔画排序；10-15区及88-94区则未有编码。</p>

<p>在使用GB2312的程序通常采用EUC储存方法，以便兼容于ASCII。浏览器编码表上的“GB2312”，通常都是指“EUC-CN”表示法。每个汉字及符号以两个字节来表示。第一个字节称为“高位字节”，第二个字节称为“低位字节”。“高位字节”使用了0xA1-0xF7（把01-87区的区号加上0xA0），“低位字节”使用了0xA1-0xFE（把01-94加上0xA0）。由于一级汉字从16区起始，汉字区的“高位字节”的范围是0xB0-0xF7，“低位字节”的范围是0xA1-0xFE，占用的码位是72*94=6768。其中有5个空位是D7FA-D7FE。</p>

<p><strong>Big5</strong>，又称为大五码或五大码，是使用繁体中文社区中最常用的电子计算机汉字字符集标准，共收录13,060个汉字。Big5码是一套双字节字符集，使用了双八码存储方法，以两个字节来安放一个字。第一个字节称为“高位字节”，第二个字节称为“低位字节”。“高位字节”使用了0x81-0xFE，“低位字节”使用了0x40-0x7E，及0xA1-0xFE。</p>

<p><strong>Unicode</strong>是为了解决传统的字符编码方式的局限而产生的，例如ISO 8859所定义的字符虽然在不同的国家中广泛地使用，可是在不同国家间却经常出现不兼容的情况。很多传统的编码方式都具有一个共同的问题，即其容许电脑进行双语环境式的处理（通常使用拉丁字母以及其本地语言），但却无法同时支持多语言环境式的处理（指可同时处理混合多种语言的情况）。</p>

<p>大概来说，Unicode编码系统可分为编码方式和实现方式两个层次。</p>

<p>1、编码方式</p>

<p>Unicode的编码方式与ISO 10646的通用字符集（Universal Character Set，UCS）概念相对应，目前实际应用的Unicode版本对应于UCS-2，使用16位的编码空间。也就是每个字符占用2个字节。这样理论上一共最多可以表示216即65536个字符。基本满足各种语言的使用。实际上当前版本的Unicode尚未填充满这16位编码，保留了大量空间作为特殊使用或将来扩展。上述16位Unicode字符构成基本多文种平面（Basic Multilingual Plane，简称BMP）。最新（但未实际广泛使用）的Unicode版本定义了16个辅助平面，两者合起来至少需要占据21位的编码空间，比3字节略少。但事实上辅助平面字符仍然占用4字节编码空间，与UCS-4保持一致。未来版本会扩充到ISO 10646-1实现级别3，即涵盖UCS-4的所有字符。UCS-4是一个更大的尚未填充完全的31位字符集，加上恒为0的首位，共需占据32位，即4字节。理论上最多能表示231个字符，完全可以涵盖一切语言所用的符号。BMP字符的Unicode编码表示为U+hhhh，其中每个h 代表一个十六进制数位。与UCS-2编码完全相同。对应的4字节UCS-4编码后两个字节一致，前两个字节的所有位均为0。</p>

<p>2、实现方式</p>

<p>Unicode的实现方式不同于编码方式。一个字符的Unicode编码是确定的。但是在实际传输过程中，由于不同系统平台的设计不一定一致，以及出于节省空间的目的，对Unicode编码的实现方式有所不同。Unicode的实现方式称为Unicode转换格式（Unicode Translation Format，简称为UTF）。</p>

<p>例如，如果一个仅包含基本7位ASCII字符的Unicode文件，如果每个字符都使用2字节的原Unicode编码传输，其第一字节的8位始终为0。这就造成了比较大的浪费。对于这种情况，可以使用UTF-8编码，这是一种变长编码，它将基本7位ASCII字符仍用7位编码表示，占用一个字节（首位补0）。而遇到与其他Unicode字符混合的情况，将按一定算法转换，每个字符使用1-3个字节编码，并利用首位为0或1进行识别。这样对以7位ASCII字符为主的西文文档就大大节省了编码长度（具体方案参见UTF-8）。类似的，对未来会出现的需要4个字节的辅助平面字符和其他UCS-4扩充字符，2字节编码的UTF-16也需要通过一定的算法进行转换。再如，如果直接使用与Unicode编码一致（仅限于BMP字符）的UTF-16编码，由于每个字符占用了两个字节，在Macintosh (Mac)机和PC机上，对字节顺序的理解是不一致的。这时同一字节流可能会被解释为不同内容，如某字符为十六进制编码4E59，按两个字节拆分为4E和59，在Mac上读取时是从低字节开始，那么在Mac OS会认为此4E59编码为594E，找到的字符为“奎”，而在Windows上从高字节开始读取，则编码为U+4E59的字符为“乙”。就是说在Windows下以UTF-16编码保存一个字符“乙”，在Mac OS里打开会显示成“奎”。此类情况说明UTF-16的编码顺序若不加以人为定义就可能发生混淆，于是在UTF-16编码实现方式中使用了大端序（Big-Endian， 简写为UTF-16 BE）、小端序（Little-Endian，简写为UTF-16 LE）的概念，以及可附加的字节顺序记号解决方案，目前在PC机上的Windows系统和Linux系统对于UTF-16编码默认使用UTF-16 LE。</p>

<p>此外Unicode的实现方式还包括UTF-7、Punycode、CESU-8、SCSU、UTF-32等，这些实现方式有些仅在一定的国家和地区使用，有些则属于未来的规划方式。目前通用的实现方式是UTF-16小尾序（LE）、UTF-16大尾序（BE）和UTF-8。在微软公司Windows XP操作系统附带的记事本（Notepad）中，“另存为”对话框可以选择的四种编码方式除去非Unicode编码的ANSI（对于英文系统即ASCII编码，中文系统则为GB2312或Big5编码） 外，其余三种为“Unicode”（对应UTF-16 LE）、“Unicode big endian”（对应UTF-16 BE）和“UTF-8”。</p>

<p>目前辅助平面的工作主要集中在第二和第三平面的中日韩统一表意文字中，因此包括GBK、GB18030、Big5等简体中文、繁体中文、日文、韩文以及越南喃字的各种编码与Unicode的协调性被重点关注。考虑到Unicode最终要涵盖所有的字符，从某种意义而言，这些编码方式也可视作Unicode的出现于其之前的既成事实的实现方式，如同ASCII及其扩展Latin-1一样，后两者的字符在16位Unicode编码空间中的编码第一字节各位全为0，第二字节编码与原编码完全一致。但上述东亚语言编码与Unicode编码的对应关系要复杂得多。</p>

<p><strong>GBK</strong>即汉字内码扩展规范，K为汉语拼音 Kuo Zhan（扩展）中“扩”字的声母。英文全称Chinese Internal Code Specification。字符有一字节和双字节编码，00–7F范围内是一位，和ASCII保持一致，此范围内严格上说有96个文字和32个控制符号。之后的双字节中，前一字节是双字节的第一位。总体上说第一字节的范围是81–FE（也就是不含80和FF），第二字节的一部分领域在40–FE，其他领域在80–FE。</p>

<p><strong>GB18030</strong>，全称：国家标准GB 18030-2005《信息技术中文编码字符集》，是中华人民共和国现时最新的内码字集，是GB 18030-2000《信息技术信息交换用汉字编码字符集 基本集的扩充》的修订版。与GB 2312-1980完全兼容，与GBK基本兼容，支持GB 13000及Unicode的全部统一汉字，共收录汉字70244个。</p>

<p>GB 18030主要有以下特点：与 UTF-8 相同，采用多字节编码，每个字可以由1个、2个或4个字节组成。编码空间庞大，最多可定义161万个字符。支持中国国内少数民族的文字，不需要动用造字区。汉字收录范围包含繁体汉字以及日韩汉字。</p>

<p>GB 18030的字节结构如下：单字节，其值从0到0x7F。双字节，第一个字节的值从0x81到0xFE，第二个字节的值从0x40到0xFE（不包括0x7F）。四字节，第一个字节的值从0x81到0xFE，第二个字节的值从0x30到0x39，第三个字节从0x81到0xFE，第四个字节从0x30到0x39。</p>

<p><strong>====================以上内容来自wikipedia====================</strong></p>

<p><strong>
</strong></p>

<p>事实上，上述wiki内容是没有必要细究的:)，下面进入正题。</p>

<p>Qt中的内置字符串类为QString，它是以16位unicode编码（unicode 4.0/unicode-16）存储的。QString被应用于所有涉及字符串操作的API中，也就是说，如果你要用Qt构建应用程序，那么研究QString是不可避免的。</p>

<p>下面是一种比较自由的字符集转换方式:</p>

<p>[code]
QByteArray encodedString = &quot;mp77的技术交流频道&quot;;    //为什么要用QByteArray?
QTextCodec *codec = QTextCodec::codecForName(&quot;gb2312&quot;);
QString string = codec-&gt;toUnicode(encodedString);
[/code]</p>

<p>QTextCodec为我们提供了针对超过30种常用字符集间互相转换的机制，但这种简单实现代码量较大，不适合字符串操作较多的情况。那么下面这种方案则受到广大程序员的欢迎：</p>

<p>[code]
QTextCodec::setCodecForTr(QTextCodec::codecForName(&quot;gb2312&quot;)); //beginning of code
&hellip;&hellip;
QString string = QObject::tr(&quot;mp77的技术交流频道&quot;);
[/code]</p>

<p>QTextCodec提供了一种类似国际化接口的操作，所有的字符集规定在代码行首部完成，之后只需要借助国际化的方法初始化任意字符串即可（尽管这与真正的国际化功能有所区别）。现在我们解释首段代码中为何使用QByteArray接收中文字符串，如果不做任何处理直接运行：</p>

<p>[code]
QString string = &quot;mp77的技术交流频道&quot;;
[/code]</p>

<p>由于系统采用ANSI编码(包括Multi-Byte Chactacter System，MBCS字符集)，那么上述语句执行后，字符串string在内存中的内容实际上是以ANSI编码。由于对ansi的操作与unicode完全不兼容，那么此后QT中所有的字符串操作都会受到影响，最终输出时就会出现所谓的“乱码”。因此，类似的直接赋值形式应当尽量避免。</p>

<p>我们注意到在vc6时代经常采用以下赋值方式：</p>

<p>[code]
const char* string = &quot;mp77的技术交流频道&quot;;
[/code]</p>

<p>这一句包括了申请内存、写入内容并以“\0”结尾等操作，其在内存中的字符编码形态自然也是ANSI的。Qt特别提供的QByteArray类就是为了兼容这种情况，而且官方手册声称它比const char *的声明初始化方式要好很多（如采用implicit sharing，简单地说就是COW技术），而且使用上也方便许多。</p>

<p>这里介绍一个我们在实际应用中遇到的例子。题目是实现FTP协议，当然，要想实现一个稳定的FTP协议难度并不小，这主要是因为相关RFC文档并没有提供足够的协议细节，导致目前几乎没有绝对通用的FTP服务端或客户端。当然，目前仍有能够兼容大多数平台的客户端/服务端程序，且在日常使用中似乎没有发现什么问题。</p>

<p>Qt实现FTP客户端很容易——只要使用现成的QFtp即可，但关键的服务端需要手动完成了。我们在使用cuteFTP和FlashFXP这种常用客户端软件进行测试时立即发现了一个严重问题，即服务端返回的目录list中出现汉字乱码。我们检查了服务端生成目录list的函数，并未对任何字符串进行编码操作。于是直接在服务端socket的数据信息中添加了toUtf8的操作。事实表明这一修改没有解决任何问题。</p>

<p>继续检查后我们注意到类似如下一行关键代码：</p>

<p>[code]</p>

<p>QString string;</p>

<p>string = &quot;&hellip;&quot;;</p>

<p>&hellip;</p>

<p>string += local.toString(fileinfo.lastModified(),&quot; MMM dd yyyy &quot;) + filename+&quot;\r\n&quot;;</p>

<p>[/code]</p>

<p>上面实际上利用了QString对+/+=的重载进行字符串的简单构建，其中filename是出现乱码的地方——也就是唯一存在中文可能的文件或目录名称。由于字符串常量的存在，我们对string进行直接赋值实际上就导致内存信息为ansi编码，而filename来自于fileinfo.completeBaseName()，是Qt有关目录操作函数返回的文件名信息，其编码自然是utf-16。查阅QString对+/+=的重载说明知，Qt为了提升字符串操作的性能，只是在目标字符串的尾部申请了一块额外的内存空间，并直接将源字符串所在的内存块复制到新空间中。由此可见，string中实际上是ansi和utf-16两种编码的字符串混合，无论我们今后采用何种编码转换方式，都无法实现完整内容的正确转换。</p>

<p>一种解决方案是：</p>

<p>[code]</p>

<p>QString string;</p>

<p>string = &quot;&hellip;&quot;;</p>

<p>&hellip;</p>

<p>string += local.toString(fileinfo.lastModified(),&quot; MMM dd yyyy &quot;) + filename.toLocal8Bit()+&quot;\r\n&quot;;</p>

<p>[/code]</p>

<p>toLocal8Bit函数返回的是QByteArray类型的本地字符集串，如此就能保证string保持唯一的字符集了。</p>

<p>近期的文章中我们将介绍如何使用Qt构建网络应用程序，并提供一个代码示例。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qt的命运]]></title>
    <link href="http://www.hanyi.name/blog/2011/02/11/Qt-de-ming-yun/"/>
    <updated>2011-02-11T23:25:12+08:00</updated>
    <id>http://www.hanyi.name/blog/2011/02/11/Qt-de-ming-yun</id>
    <content type="html"><![CDATA[<p>Nokia的自救终于有了实质性的举动，那就是放弃Meego、过渡Symbian、抵制Android、拥抱WP。相应的，主要用于S60和Meego的Qt将会面临更加严峻的形势。</p>

<p>当然，在经过2011-2012年的Microkia过渡期之后，Qt未必就和移动设备彻底无缘。然而事实是Qt似乎又一次丧失了进军主流消费市场的机会，并被打回到开发者社区的襁褓之中。人们完全可以理解Nokia的举动——这几乎关系到其自身的生死存亡，但这一次Nokia像是有些孤注一掷了：毕竟Microsoft在本次合作中所承受的风险要比合作伙伴低很多，而潜在受益则又高很多。不过，WP本身就是killer OS，只不过受制于载体而令销量裹足不前，既然Moto能携Android焕发第二春，Nokia又何尝没有机会东山再起呢。但试想一下，即使Nokia真的凭借WP上演王者归来，那么到那时“王者”的定义恐怕就完全与当初不可同日而语了。</p>

<p>话说回来，Qt自身的魅力本不在寄宿于S60或是一直处在传说中的Meego，而在其新颖的核心机制，华丽的UI资源，丰富的功能模块和强大的跨平台特性。预测今后的移动消费市场，如果不出意外最晚在2013年起（到时候可能WP8早就继位了），天下三分的局面就将形成。届时大部分求变的动力将主要来自三家内部，而Qt有绝佳的机会成为联系三大体系的唯一技术解决方案（当然目前这只是一厢情愿的YY&hellip;）。</p>

<p>对我们自己而言，大多数爱好者毕竟不是真的靠Qt吃饭，少量利益相关的开发者也并未只从事移动领域的开发工作。作为一名工匠，人们往往乐于使用自己喜欢的工具谋生，但现实经常是，大部分人正在从事的并非是自己所认为的最佳选择。Qt在过去和现在所扮演的角色，今后很长一段时间恐怕还要继续下去。</p>

<p>出于对Qt的欣赏和喜爱，本博将在今后继续坚持Qt专题的写作。但愿Nokia的决定不至于严重影响现有的Qt开发者团队。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qt初揭秘——终结篇]]></title>
    <link href="http://www.hanyi.name/blog/2010/11/20/Qt-chu-jie-mi-zhong-jie-zhong/"/>
    <updated>2010-11-20T17:52:27+08:00</updated>
    <id>http://www.hanyi.name/blog/2010/11/20/Qt-chu-jie-mi-zhong-jie-zhong</id>
    <content type="html"><![CDATA[<p> 我们最近花了几周时间详细介绍Qt的特性，她无疑是目前最能体现大多数程序员编程理想的优秀程序框架之一。</p>

<p> 尽管从市场趋势来看，智能移动终端乱战可能将由RIM Blackberry，IPhone，Android，WP，PALM继续主导，前两者在发达国家仍然占有举足轻重的地位，而Google发起的Open Handset Alliance及其力推的Android无疑将横扫新兴市场国家，WP的问题或许就出在缺少前面的特定市场定位，但的确也不能排除WP未来通吃的可能（当然这种可能性是微乎其微的）。 而Nokia面临的危机是实在的，迟到的Symbian<sup>3</sup>在中高端市场上表现依然乏力，同时在开发者社区的支持率也被大量蚕食。MeeGo的开发现状和前景亦不被多数人所看好。这就直接导致Qt如今似乎处于一个尴尬的地位：毕竟移动市场的诱惑力已远远超越了桌面市场。</p>

<p> 但如果历史在2008年发生扭转，Qt甚至可能还不会得到这种全面进军移动领域的机遇。在我看来，Qt在移动领域看似生不逢时，实际上此时却也是群雄逐鹿的历史转折点，Qt何去何从，我们只当拭目以待。</p>

<p> 我们选择编译Ryan Paul的这篇文章的原因在于他为我们展现了Qt提供给开发人员的一些更为直观的好处，事实上，ars technia在开源领域具有独特且精彩的第三方评论，无论是过去还是现在，编辑们都坚持为可爱的开源软件项目摇旗呐喊，不遗余力。下面仅给出前面两篇文章的原文地址，以及原作者近期对Qt新发行版的深度评论。</p>

<p> <strong>Troll treasure: an in-depth look at Qt 4.4</strong></p>

<p> <a href="http://arstechnica.com/open-source/news/2008/05/troll-treasure-qt44-in-depth.ars/2"><a href="http://arstechnica.com/open-source/news/2008/05/troll-treasure-qt44-in-depth.ars/2">http://arstechnica.com/open-source/news/2008/05/troll-treasure-qt44-in-depth.ars/2</a></a></p>

<p> <strong>Qt gets cuter: 4.6 brings expanded platform support</strong></p>

<p> <a href="http://arstechnica.com/open-source/news/2009/12/qt-gets-cuter-46-brings-expanded-platform-support.ars"><a href="http://arstechnica.com/open-source/news/2009/12/qt-gets-cuter-46-brings-expanded-platform-support.ars">http://arstechnica.com/open-source/news/2009/12/qt-gets-cuter-46-brings-expanded-platform-support.ars</a></a></p>

<p> <strong>Nokia releases Qt 4.7 with terrific new mobile UI framework</strong></p>

<p> <a href="http://arstechnica.com/open-source/news/2010/09/nokias-cross-platform-development-strategy-evolves-with-qt-47.ars"><a href="http://arstechnica.com/open-source/news/2010/09/nokias-cross-platform-development-strategy-evolves-with-qt-47.ars">http://arstechnica.com/open-source/news/2010/09/nokias-cross-platform-development-strategy-evolves-with-qt-47.ars</a></a></p>

<p> <strong>How Qt could bring better third-party software to Ubuntu</strong></p>

<p> <a href="http://arstechnica.com/open-source/news/2010/10/canonical-cto-contemplates-qt-we-think-it-has-a-lot-to-offer-ubuntu.ars"><a href="http://arstechnica.com/open-source/news/2010/10/canonical-cto-contemplates-qt-we-think-it-has-a-lot-to-offer-ubuntu.ars">http://arstechnica.com/open-source/news/2010/10/canonical-cto-contemplates-qt-we-think-it-has-a-lot-to-offer-ubuntu.ars</a></a></p>

<p> 今后，我们的Qt专题将着重于讨论技术细节。对于未来，我们只好交由历史自己去判断。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Qt的一切(续)]]></title>
    <link href="http://www.hanyi.name/blog/2010/11/20/guan-yu-Qt-de-yi-qie-xu/"/>
    <updated>2010-11-20T15:58:20+08:00</updated>
    <id>http://www.hanyi.name/blog/2010/11/20/guan-yu-Qt-de-yi-qie-xu</id>
    <content type="html"><![CDATA[<p>(前文<a href="http://www.hanyi.name/blog/?p=263" target="_self">见此</a>)</p>

<p><strong> 网页内容和本地代码的紧密集成</strong></p>

<p> Qt4.4另一个令人非常兴奋的特性在于新的QtWebKit模块，它允许开发人员实现HTML内容和本地工具组件的无缝结合。WebKit是一种基于KDE社区KHTML框架的开源HTML渲染器，最初是由苹果为Safari开发的。WebKit轻量、可移植、且易于嵌入的特性使得其越来越多地被Nokia、Adobe、Google等公司引入到其产品中。</p>

<p><a href="null"><img class="aligncenter" title="http://media.arstechnica.com/news.media/450/webkit-architecture.png" src="http://media.arstechnica.com/news.media/450/webkit-architecture.png" alt="" width="450" height="281" /></a></p>

<p> 全新的QWebView工具组件通过一系列携带signal和property的高层Qt API来展现web功能，其底层是一种完全基于WebKit的HTML渲染引擎。QWebView工具组件可以在Designer工具中像其它工具组件一样被轻松置入Qt form中。它支持从本地或远程URIs或字符串中载入HTML内容。</p>

<p><a href="null"><img class="alignnone" title="http://media.arstechnica.com/news.media/450/qt440_webkit_designer.png" src="http://media.arstechnica.com/news.media/450/qt440_webkit_designer.png" alt="" width="450" height="354" /></a></p>

<p> QtWebKit允许开发人员能够轻松地将其本地代码方法和JavaScript紧密结合，并通过本地代码对QWebView中上下文的JavaScript代码进行评估。这就意味着其支持一种双向集成：开发人员能够将本地Qt工具组件嵌入至网页内容中，甚至可以给JavaScript函数绑定Qt signals。Trolltech开发人员Kent Hansen的<a href="http://labs.trolltech.com/blogs/page/2/" target="_blank">博客</a>在上周明确展示了QWebKit是如何在本地代码中使用的：他演示了一种如何把Qt Designer用户接口描述文件动态集成到QWebView中，并使用QtScript演示了整个过程。正如上述概念所示，他能把Qt tutorials中的一张截图替换成具有完整功能的应用程序版本，并直接嵌入至HTML页面。</p>

<p><a href="null"><img class="aligncenter" title="http://media.arstechnica.com/news.media/450/qtwebkitplug.png" src="http://media.arstechnica.com/news.media/450/qtwebkitplug.png" alt="" width="450" height="425" /></a></p>

<p> 如同hansen展示的这种开发技术已经大大扩展了Qt在未来的潜力。这种方法可以用于构建快速原型，并为应用程序提供更多扩展能力。正如我们今年早前一篇文章中介绍的关于在linux中利用WebKit创建RIAs的主题，Trolltech的方法比起Adobe的AIR这种完全自给自足的模式使得RIAs开发更为灵活、更具有扩展性并且更加易于代码重用。</p>

<p> 除了提供HTML渲染功能以外，QWebKit也提供一种用于处理其它面向浏览器功能如代理、cookies、网络以及SSL支持的完整组件堆栈。Trolltech的开发人员Benjamin Meyer已经在开发一种完全基于Qt的名叫Arora的工具，它是一种可用于概念验证（Proof of Concept ）的网页浏览器。 </p>

<p> <a href="null"><img class="aligncenter" title="http://media.arstechnica.com/news.media/450/browserdemo.png" src="http://media.arstechnica.com/news.media/450/browserdemo.png" alt="" width="450" height="411" /></a></p>

<p> Qt4.4中的WebKit版本大约于六个月前发布。Meyer声称Trolltech计划将为Qt 4.5提供更多基于新版WebKit的改进。苹果的WebKit最近在Acid 3的CSS测试中达到了百分之百通过，且在最近几个月又加入了大量绚丽丰富的特性，如CSS渐变(gradients)和图像倒影(reflection)功能。</p>

<p> Trolltech同时计划在Qt工具组件中实现对标准浏览器插件如Flash、Java applets的支持，以使其能够嵌入至Qt应用程序中。规划中的另一个特性是开发一种基于Qt的API以简化对网页内容的操作，如标准DOM API，但更加轻量级。关于QtWebKit的更多细节，请查阅Trolltech<a href="http://dist.trolltech.com/pdf/qt-webkit-feb-2008-whitepaper-a4.pdf" target="_blank">白皮书</a>。（译注：Trolltech白皮书非周期性发布，经验证源地址已无效，目前在<a href="http://qt.nokia.com/files/pdf"><a href="http://qt.nokia.com/files/pdf">http://qt.nokia.com/files/pdf</a></a>可以看到所有的pdf资源，包括Qt4.4的whitepaper，如果对Qt的roadmap感兴趣可以查看这里<a href="http://qt.nokia.com/developer/qt-roadmap"><a href="http://qt.nokia.com/developer/qt-roadmap">http://qt.nokia.com/developer/qt-roadmap</a></a>，当然最佳的做法是加入官方maillist，我们将在文后提供相关信息）</p>

<p> <strong>QGraphicsView工具组件</strong></p>

<p> QGraphicsView canvas工具组件在Qt4.4中得到了重大改进，包括对全部本地Qt工具组件的支持。具有完整交互功能的工具组件能被直接添加进canvas中并向其它任何canvas绘制组件一样运行。这种特性能够实现工具组件的移动动画，并提供更加复杂的视觉效果。Trolltech的开发人员实现了对输入重定向的完整支持，这意味着用户可以和基于QGraphicsView canvas的Qt工具组件任意交互，甚至当这些组件处于各种动画效果时亦如此。</p>

<p><a href="null"><img class="aligncenter" title="http://media.arstechnica.com/news.media/450/dialogdemo.png" src="http://media.arstechnica.com/news.media/450/dialogdemo.png" alt="" width="450" height="222" /></a></p>

<p> “Graphics View并不会自身提供工具组件如QLineEdit或者QComboBox，相反，你应当把现有的工具组件嵌入到场景中（事实上，任何用户自定义的工具组件皆能如此），这一功能可以通过调用QGraphicsScene::addWidget()实现。”Trolltech的Andreas Hanssen的<a href="http://labs.trolltech.com/blogs/2007/11/22/widgets-on-the-canvas-integrated/" target="_blank">博客</a>在去年阐述了这种功能。“如果你还想传入Qt::Window标识，”你的工具组件甚至将类似QMdiSubWindow一样获得窗口装饰效果。你可以拖动、自定义大小、旋转、缩放或者结合工具组件和其它组件生成极具想象力的修饰或效果转换。</p>

<p> QGraphicsView支持添加Qt工具组件的功能为更加丰富的用户界面创造了无穷的潜力：这些界面将不再受传统布局框架的局限。工具组件可以在角度变换中漂浮、自由旋转、或者根据用户交互信息变换。桌面上存在大量可供canvas工具组件渲染的位置将提供更多的实用性。例如，在KDE桌面环境中将把这种特性应用于Plasma desktop shell。（译注：Plasma即是KDE的桌面组件）</p>

<p> 当我们在去年首次试验这种新特性时，我们查看了Trolltech的示例代码以确定它是如何工作的，之后我们创建了一个测试应用程序以展示在QGraphcisView中变更角度以缩放和渲染一个QWebView工具组件。这一过程非常易于操作，且仅需要少量代码即可实现。</p>

<p> <a href="null"><img class="aligncenter" title="http://media.arstechnica.com/news.media/450/qt440_browser_demo.png" src="http://media.arstechnica.com/news.media/450/qt440_browser_demo.png" alt="" width="450" height="325" /></a></p>

<p> 在我们的测试中发现了极少量的技术缺陷问题，如下拉列表菜单工具组件的定位bug——似乎在4.4发行版中得到修复。开发人员目前已经在很大程度上修正了我们之前测试中提出的性能问题，并且很<a href="http://labs.trolltech.com/blogs/2008/02/04/qt-44-and-painting-performance/" target="_blank">负责地</a>对这一问题做出更进一步的改进。</p>

<p> <strong>用Phonon播放音乐</strong></p>

<p> Phonon是一种跨平台的多媒体抽象层，它提供了一些轻量级的API以支持简单的音频或视频片段的录放功能。它支持多后台运行，并且允许应用程序能够实现跨平台地多媒体处理功能，而非不得不去单独处理特定平台的实现细节问题。</p>

<p> Phonon最初是由KDE开发社区为KDE4开发的，且其最初只支持Xine后台（译注：一种类UNIX平台上的GPL多媒体播放引擎）运行。后来Trolltech决定将其引入Qt，因此他们开发了其他后台支持如GStreamer、Windows的DirecShow 9以及Mac Os X的QuickTime 7。Trolltech已经把这些后台的上行数据流和Phonon集成以便能够得到KDE社区的持续性开发和维护支持。</p>

<p> 由于Trolltech引入的这些后台引擎使得Phonon能够与Windows和Mac OS X等操作系统中的本地多媒体框架无缝整合，Phonon自然将支持相关平台提供的任何解码器和多媒体格式。由于Phonon提供自身独立的抽象层，同样的代码可在Qt应用程序中实现基本多媒体操作的跨平台重用。</p>

<p> <a href="null"><img class="aligncenter" title="http://media.arstechnica.com/news.media/450/mediaplayer-demo.png" src="http://media.arstechnica.com/news.media/450/mediaplayer-demo.png" alt="" width="332" height="166" /></a></p>

<p> <strong>其它零碎工作</strong></p>

<p> 在一篇文章内完成Qt4.4所有改进特性的讨论几乎是无法实现的任务，至此我们也只是提供了一些最为显著的特性概览。一些其它同样精彩的特性，如新的并发框架——它可以简化多线程Qt应用程序开发，以及一个支持XQuery标准实现内容操作的XML框架。Qt4.4同时还包括了大量的性能改进和大范围的bug修复工作。</p>

<p> 正如我们上周注意到的，Qt4.4已经被KDE所采用并将用于几个KDE4.1发行版的新特性中。采用Qt作为其跨平台桌面音乐端软件的社交音乐网站Last.fm，也已经在测试Qt4.4，新的Qt发行版将使Last.fm有潜力为Windows Mobile移动设备提供客户端应用软件。</p>

<p> <strong>（正文完）</strong></p>

<p> 编后：下篇文章中，我们将继续贴出其它部分的Qt在线资料。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Qt的一切]]></title>
    <link href="http://www.hanyi.name/blog/2010/11/14/guan-yu-Qt-de-yi-qie/"/>
    <updated>2010-11-14T12:49:43+08:00</updated>
    <id>http://www.hanyi.name/blog/2010/11/14/guan-yu-Qt-de-yi-qie</id>
    <content type="html"><![CDATA[<p> Qt在中国程序员人群中兴起较早，Trolltech亦对中国市场颇为重视。2005年，Trolltech在北京成立代表处，旨在向中国用户提供Qtopia相关的销售服务、培训以及技术支持。同年Qt官网也首次加入双语页面——英语和汉语两种版本（而非现在的多国语言）。</p>

<p> 不甚了解Qt的同学可能会对Qt的功能产生怀疑：Qt难道不是简单的GUI框架吗？为了能更好的解答这个问题，我特从ArsTechnica.com编译了一篇由Ryan Paul撰写的关于深度透视Qt4.4的文章，尽管Qt开发团队刚刚发布了4.7.1的新版本，我依然认为Qt今后的发展趋势将是沿着2005年夏天Qt4.0发布所带来革命性影响的延续，这也是软件工程理论与实践证明目前最好的技术框架之一。同时文后我们也将推荐其它几篇Qt阶段性介绍的文章，值得注意的是，作者原文较为冗长，我们将分两期刊出，以飨读者。</p>

<p><strong> Troll精品:深度解析Qt4.4（原题:Troll treasure:an in-depth look at Qt4.4）</strong> </p>

<p> <strong>文/图 Ryan Paul 编译 mp77</strong></p>

<p> Trolltech刚刚宣布了Qt4.4的官方发布版（译注：这里是指2008年5月），这是对Trolltech出品的最受欢迎的、跨平台的应用程序框架的一次备受期待的更新。Qt多许可证分发的模式允许其即可用于开源项目，亦可进行专有的商业开发。她广泛应用于Linux平台，并为KDE桌面环境提供了基础工具包。同时，Qt亦用于许多商业软件如Skype,GoogleEarth以及Adobe Photoshop套件中。</p>

<p> Qt4.4最受瞩目的更新内容主要包括了多媒体抽象层、基于WebKit的HTML渲染器、一种新的并发框架以及支持基于工具包内的drawing canvas技术渲染工具组件。这也是Qt首次包含对Windows CE和Windows Mobile的支持。</p>

<p> 去年在测试Qt4.4预释放版时我们曾经向您提供了一些早期的功能预览。在目前开发工作已经全部完成、功能较完备的情况下，我们进一步审视了Qt4.4。最终，我们进行了大量测试以探究这些新技术的实现原理。同时，我们也和Trolltech的首席执行官Benoit Schillings一起讨论了Qt4.4，Benoit Schillings向我们分享了一些关于Qt4.4的技术内幕，并且给出了Qt未来版本趋势的一些建议。</p>

<p> <strong>桥接桌面与移动设备的鸿沟</strong></p>

<p> Qt支持所有主流的桌面操作系统，包括Linux、Mac OS X和Windows。她使用本地API渲染工具组件，这就意味着大多数的Qt应用程序具有基于操作系统的外观一致性。Trolltech同时提供了Qtopia——一个基于Linux移动操作系统的综合开发平台，Qtopia亦被广泛应用于如Sony Mylo、一些Motorola mobile phone handsets中。Qt4.4通过引入对Windows CE的完整支持扩充了自身的可移植性。开发人员现在可以用Qt编写任何一段应用程序代码，就可以完全移植到任何所支持的操作系统中去。</p>

<p> Qt为Windows CE提供了大量功能，且能很好地适用于创建基于图形的触摸式用户界面。开发人员声称Qt表现出良好的性能和对本地外观和平台体验的强力支持。Trolltech同时发布了可以使Qt与Visual Studio紧密集成的工具，这样能够让现有Windows CE程序员轻松适应这个应用程序框架。</p>

<p> <a href="null"><img class="aligncenter" title="qt44structure" src="http://media.arstechnica.com/news.media/450/qt44structure.png.png" alt="" width="450" height="283" /></a></p>

<p> Qt支持Windows CE所带来的潜在好处是，其允许程序员能够将现有的KDE或Qt程序移植到更多的环境中，这将大大扩展目前开源软件在操作系统支持方面的生态系统。我确信自己会非常乐意在Windows Mobile设备中运行基于Qtopia的软件如FBReader，Trolltech的开发人员也已经在实验性地将相对复杂的KDE4应用程序移植到Windows Mobile中。例如，Thomas Hartmann在上个月撰写的<a href="http://labs.trolltech.com/blogs/2008/04/04/marble-running-on-windows-ce/" target="_blank">博客</a>展示了一种基于KDE4软件的移植，这个软件是一种复杂地图系统绘制系统，它能够在多种Windows设备中流畅地运行。</p>

<p><a href="null"><img class="aligncenter" title="qtmarble" src="http://media.arstechnica.com/news.media/450/qtmarble.png" alt="" width="450" height="309" /></a></p>

<p>这种来自Qt更高级别的可移植性吸引了移动设备巨头Nokia，后者正在进行对Trolltech的收购进程中（译注:收购已于2008年结束）。</p>

<p> 这项交易仍然处于欧盟审查之中。今年早先的一项声明指出，Nokia宣称将力促Qt成为一种跨平台的软件开发平台，它将可以在大多数移动和桌面平台上运行。 Nokia也已计划将Qt引入S60和Maemo移动操作系统的（译注：这项计划目前已实现）。</p>

<p><strong> （未完待续）</strong></p>
]]></content>
  </entry>
  
</feed>
